,question,difficulty,code,num_lines,num_parameters,num_loops,sample_input,expected_output,actual_output,execution_time_ms,model
0,"Write a program that prints ""Hello, World!"" to the console.",Easy,"print(""Hello, World!"")",1,0.0,0,,"Hello, World!","Hello, World!",0.0320840044878423,gpt-4o
1,"Ask the user for their name and age, then print a greeting message.",Easy,"def greet(name, age):
    return f""Hello {name}, you are {age} years old.""
result = greet(""Alice"", 25)",3,2.0,0,"('Alice', 25)","Hello Alice, you are 25 years old.","Hello Alice, you are 25 years old.",0.0562919885851442,gpt-4o
2,Write a program that adds two user-input numbers and displays the result.,Easy,"def add(a, b):
    return a + b
result = add(3, 4)",3,2.0,0,"(3, 4)",7,7,0.0299160019494593,gpt-4o
3,Take an integer as input and print whether it is even or odd.,Easy,"def is_even(n):
    return ""Even"" if n % 2 == 0 else ""Odd""
result = is_even(5)",3,2.0,0,5,Odd,Odd,0.0374169903807342,gpt-4o
4,"Given three numbers, print the largest one.",Easy,"def find_largest(a, b, c):
    return max(a, b, c)
result = find_largest(4, 7, 2)",3,3.0,0,"(4, 7, 2)",7,7,0.0400829885620623,gpt-4o
5,Swap the values of two variables without using a third variable.,Easy,"a, b = 5, 10
a, b = b, a
result = (a, b)",3,1.0,0,"(5, 10)","(10, 5)","(10, 5)",0.0349580077454447,gpt-4o
6,Print all numbers from 1 to 100 using a for loop.,Easy,"result = list(range(1, 101))",1,2.0,0,,"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]","[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",0.027874979423359,gpt-4o
7,Ask the user for a number and print its multiplication table up to 10.,Easy,"def multiplication_table(n):
    return [n * i for i in range(1, 11)]
result = multiplication_table(5)",3,3.0,1,5,"[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]","[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",0.0528749951627105,gpt-4o
8,Write a function to calculate the factorial of a number using a loop.,Easy,"def factorial(n):
    result = 1
    for i in range(1, n+1):
        result *= i
    return result
result = factorial(5)",6,3.0,1,5,120,120,0.0406249891966581,gpt-4o
9,Check if a given number is a prime number.,Easy,"def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True
result = is_prime(7)",8,4.0,1,7,True,True,0.0572080025449395,gpt-4o
10,Generate and print the first `n` numbers of the Fibonacci sequence.,Easy,"def fibonacci(n):
    seq = [0, 1]
    for i in range(2, n):
        seq.append(seq[-1] + seq[-2])
    return seq[:n]
result = fibonacci(7)",6,4.0,1,7,"[0, 1, 1, 2, 3, 5, 8]","[0, 1, 1, 2, 3, 5, 8]",0.056541000958532,gpt-4o
11,Reverse a string taken from user input without using slicing.,Easy,"def reverse_string(s):
    rev = ''
    for char in s:
        rev = char + rev
    return rev
result = reverse_string('hello')",6,2.0,1,hello,olleh,olleh,0.0437500129919499,gpt-4o
12,Count the number of vowels in a given string.,Easy,"def count_vowels(s):
    return sum(1 for c in s.lower() if c in 'aeiou')
result = count_vowels('education')",3,4.0,1,education,5,5,0.0522909977007657,gpt-4o
13,Check whether a given string is a palindrome.,Easy,"def is_palindrome(s):
    return s == s[::-1]
result = is_palindrome('madam')",3,2.0,0,madam,True,True,0.030791008612141,gpt-4o
14,Write a program to find the length of a list without using `len()`.,Easy,"lst = [1, 2, 3, 4, 5]
count = 0
for _ in lst:
    count += 1
result = count",5,0.0,1,"[1, 2, 3, 4, 5]",5,5,0.0367499887943267,gpt-4o
15,Find the largest and smallest numbers in a list of integers.,Easy,"lst = [3, 7, 2, 9, 4]
result = (min(lst), max(lst))",2,3.0,0,"[3, 7, 2, 9, 4]","(2, 9)","(2, 9)",0.032249983632937,gpt-4o
16,Remove all duplicate elements from a list and print the result.,Easy,"lst = [1, 2, 2, 3, 4, 4, 5]
result = list(set(lst))",2,2.0,0,"[1, 2, 2, 3, 4, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]",0.029707996873185,gpt-4o
17,Sort a list of integers in ascending order using the built-in sort() method.,Easy,"lst = [5, 2, 9, 1]
lst.sort()
result = lst",3,1.0,0,"[5, 2, 9, 1]","[1, 2, 5, 9]","[1, 2, 5, 9]",0.0260410015471279,gpt-4o
18,Calculate the sum of all numbers in a list using a loop.,Easy,"lst = [1, 2, 3, 4]
s = 0
for i in lst:
    s += i
result = s",5,0.0,1,"[1, 2, 3, 4]",10,10,0.0287089787889271,gpt-4o
19,Write a function that returns the second largest number in a list.,Easy,"def second_largest(lst):
    lst = list(set(lst))
    lst.sort()
    return lst[-2]
result = second_largest([1, 3, 2, 4, 5])",5,5.0,0,"[1, 3, 2, 4, 5]",4,4,0.0458750000689178,gpt-4o
20,Convert a temperature from Celsius to Fahrenheit.,Easy,"def celsius_to_fahrenheit(c):
    return (c * 9/5) + 32
result = celsius_to_fahrenheit(0)",3,3.0,0,0,32.0,32.0,0.0294589844997972,gpt-4o
21,Count the number of words in a sentence input by the user.,Easy,"def count_words(sentence):
    return len(sentence.split())
result = count_words(""Hello world this is Python"")",3,4.0,0,Hello world this is Python,5,5,0.0323750136885792,gpt-4o
22,Write a program that prints the ASCII value of a given character.,Easy,"char = 'A'
result = ord(char)",2,1.0,0,A,65,65,0.019250001059845,gpt-4o
23,Print each character of a string on a new line using a loop.,Easy,"s = 'Hi'
output = ''
for c in s:
    output += c + '\n'
result = output.strip()",5,1.0,1,Hi,"H
i","H
i",0.0314579810947179,gpt-4o
24,Merge two user-defined lists and print the merged result.,Easy,"lst1 = [1, 2]
lst2 = [3, 4]
result = lst1 + lst2",3,0.0,0,"([1, 2], [3, 4])","[1, 2, 3, 4]","[1, 2, 3, 4]",0.0313339987769722,gpt-4o
25,Square every element of a list using list comprehension.,Easy,"lst = [1, 2, 3, 4]
result = [x**2 for x in lst]",2,0.0,1,"[1, 2, 3, 4]","[1, 4, 9, 16]","[1, 4, 9, 16]",0.0327499874401837,gpt-4o
26,Filter out all even numbers from a list using list comprehension.,Easy,"lst = [1, 2, 3, 4, 5, 6]
result = [x for x in lst if x % 2 != 0]",2,0.0,1,"[1, 2, 3, 4, 5, 6]","[1, 3, 5]","[1, 3, 5]",0.0363340077456086,gpt-4o
27,Write a function that returns the sum of digits of an integer.,Easy,"def sum_of_digits(n):
    return sum(int(d) for d in str(n))
result = sum_of_digits(1234)",3,5.0,1,1234,10,10,0.0403749872930347,gpt-4o
28,Find the maximum of three numbers using a user-defined function.,Easy,"def max_of_three(a, b, c):
    return max(a, b, c)
result = max_of_three(3, 7, 5)",3,3.0,0,"(3, 7, 5)",7,7,0.031208008294925,gpt-4o
29,Create a list of numbers from 1 to 20 using `range()` and print it.,Easy,"result = list(range(1, 21))",1,2.0,0,,"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]","[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",0.0201250077225267,gpt-4o
30,Convert a string to uppercase without using the `upper()` function.,Easy,"s = 'hello'
result = ''.join(chr(ord(c)-32) if 'a' <= c <= 'z' else c for c in s)",2,3.0,1,hello,HELLO,HELLO,0.0477079884149134,gpt-4o
31,Count how many times a specific character appears in a string.,Easy,"s = 'hello world'
result = s.count('l')",2,1.0,0,hello world,3,3,0.0183749943971633,gpt-4o
32,Replace all spaces in a string with underscores.,Easy,"s = 'hello world'
result = s.replace(' ', '_')",2,1.0,0,hello world,hello_world,hello_world,0.0177500187419354,gpt-4o
33,"Write a function to check if a number is positive, negative, or zero.",Easy,"def check_sign(n):
    return 'Positive' if n > 0 else 'Negative' if n < 0 else 'Zero'
result = check_sign(-5)",3,2.0,0,-5,Negative,Negative,0.0378330005332827,gpt-4o
34,Create a dictionary with 3 key-value pairs and print it.,Easy,"d = {'a': 1, 'b': 2, 'c': 3}
result = d",2,0.0,0,,"{'a': 1, 'b': 2, 'c': 3}","{'a': 1, 'b': 2, 'c': 3}",0.0243329850491136,gpt-4o
35,Access a specific value from a dictionary using a key.,Easy,"d = {'x': 10, 'y': 20}
result = d['x']",2,0.0,0,,10,10,0.0216669868677854,gpt-4o
36,Add a new key-value pair to an existing dictionary.,Easy,"d = {'x': 10}
d['y'] = 20
result = d",3,0.0,0,,"{'x': 10, 'y': 20}","{'x': 10, 'y': 20}",0.0212090089917182,gpt-4o
37,Delete a key-value pair from a dictionary.,Easy,"d = {'x': 10, 'y': 20}
d.pop('x')
result = d",3,1.0,0,,{'y': 20},{'y': 20},0.0242079840973019,gpt-4o
38,Create a tuple with 5 elements and print the second element.,Easy,"t = (1, 2, 3, 4, 5)
result = t[1]",2,1.0,0,,2,2,0.0217080232687294,gpt-4o
39,Convert a list to a tuple and print the result.,Easy,"lst = [1, 2, 3]
result = tuple(lst)",2,1.0,0,,"(1, 2, 3)","(1, 2, 3)",0.0215000181924551,gpt-4o
40,Check if an element exists in a list.,Easy,"lst = [1, 2, 3]
result = 2 in lst",2,0.0,0,,True,True,0.0192919978871941,gpt-4o
41,Check if a key exists in a dictionary.,Easy,"d = {'a': 1, 'b': 2}
result = 'b' in d",2,0.0,0,,True,True,0.019250001059845,gpt-4o
42,Write a program to calculate the area of a rectangle given length and width.,Easy,"def area(length, width):
    return length * width
result = area(5, 3)",3,2.0,0,"(5, 3)",15,15,0.027874979423359,gpt-4o
43,Create a set with 5 elements and print it.,Easy,"s = {1, 2, 3, 4, 5}
result = s",2,0.0,0,,"{1, 2, 3, 4, 5}","{1, 2, 3, 4, 5}",0.0240420049522072,gpt-4o
44,Add an element to a set and remove another.,Easy,"s = {1, 2, 3}
s.add(4)
s.remove(2)
result = s",4,2.0,0,,"{1, 3, 4}","{1, 3, 4}",0.0294169876724481,gpt-4o
45,Find the union and intersection of two sets.,Easy,"a = {1, 2, 3}
b = {2, 3, 4}
result = (a | b, a & b)",3,1.0,0,,"({1, 2, 3, 4}, {2, 3})","({1, 2, 3, 4}, {2, 3})",0.0356250093318522,gpt-4o
46,Find the number of digits in an integer.,Easy,"n = 12345
result = len(str(n))",2,2.0,0,12345,5,5,0.0194580061361193,gpt-4o
47,Check whether a given year is a leap year.,Easy,"def is_leap_year(year):
    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)
result = is_leap_year(2020)",3,3.0,0,2020,True,True,0.0368749897461384,gpt-4o
48,Create a list of the first 10 even numbers using a loop.,Easy,"result = [i for i in range(1, 21) if i % 2 == 0][:10]",1,1.0,1,,"[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]","[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",0.0359590048901736,gpt-4o
49,Write a function that accepts a string and returns it reversed using recursion.,Easy,"def reverse_recursive(s):
    return s if len(s) == 0 else reverse_recursive(s[1:]) + s[0]
result = reverse_recursive('hello')",3,4.0,0,hello,olleh,name 'reverse_recursive' is not defined,0.0512079859618097,gpt-4o
50,Write a function that finds the GCD of two numbers using the Euclidean algorithm.,Medium,"def gcd(a, b):
    while b:
        a, b = b, a % b
    return a
result = gcd(48, 18)",5,2.0,1,"(48, 18)",6,6,0.0357500102836638,gpt-4o
51,Implement a function to check whether a string is a pangram.,Medium,"import string
def is_pangram(s):
    return set(string.ascii_lowercase).issubset(s.lower())
result = is_pangram('The quick brown fox jumps over the lazy dog')",4,5.0,0,The quick brown fox jumps over the lazy dog,True,name 'string' is not defined,0.0422919983975589,gpt-4o
52,Write a function that returns the most frequent element in a list.,Medium,"from collections import Counter
def most_frequent(lst):
    return Counter(lst).most_common(1)[0][0]
result = most_frequent([1, 2, 2, 3, 3, 3])",4,4.0,0,"[1, 2, 2, 3, 3, 3]",3,name 'Counter' is not defined,0.0556670129299163,gpt-4o
53,Implement a binary search algorithm on a sorted list.,Medium,"def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1
result = binary_search([1, 3, 5, 7, 9], 7)",12,4.0,1,"([1, 3, 5, 7, 9], 7)",3,3,0.0861249864101409,gpt-4o
54,Write a function to calculate the power of a number without using the power operator.,Medium,"def power(x, y):
    result = 1
    for _ in range(y):
        result *= x
    return result
result = power(2, 5)",6,3.0,1,"(2, 5)",32,32,0.037332996726036,gpt-4o
55,"Given a list of integers, return the longest increasing subsequence.",Medium,"def longest_increasing_subsequence(lst):
    result = []
    temp = []
    for i in lst:
        if not temp or i > temp[-1]:
            temp.append(i)
        else:
            if len(temp) > len(result):
                result = temp
            temp = [i]
    return result if len(result) > len(temp) else temp
result = longest_increasing_subsequence([1, 2, 1, 2, 3, 1])",12,7.0,1,"[1, 2, 1, 2, 3, 1]","[1, 2, 3]","[1, 2, 3]",0.088375003542751,gpt-4o
56,Check if two strings are anagrams of each other.,Medium,"def are_anagrams(s1, s2):
    return sorted(s1) == sorted(s2)
result = are_anagrams('listen', 'silent')",3,4.0,0,"('listen', 'silent')",True,True,0.0329169852193445,gpt-4o
57,"Implement a stack using a Python list with push, pop, and peek operations.",Medium,"class Stack:
    def __init__(self):
        self.items = []
    def push(self, item):
        self.items.append(item)
    def pop(self):
        return self.items.pop()
    def peek(self):
        return self.items[-1]
s = Stack()
s.push(1)
s.push(2)
result = s.pop()",13,10.0,0,,2,2,0.1088340068235993,gpt-4o
58,Create a function that generates all prime numbers up to a given number.,Medium,"def generate_primes(n):
    primes = []
    for num in range(2, n+1):
        if all(num % p != 0 for p in primes):
            primes.append(num)
    return primes
result = generate_primes(10)",7,5.0,2,10,"[2, 3, 5, 7]","[2, 3, 5, 7]",0.0729589955881238,gpt-4o
59,Write a function that flattens a nested list.,Medium,"def flatten(lst):
    flat = []
    for item in lst:
        if isinstance(item, list):
            flat.extend(flatten(item))
        else:
            flat.append(item)
    return flat
result = flatten([1, [2, [3, 4], 5]])",9,6.0,1,"[1, [2, [3, 4], 5]]","[1, 2, 3, 4, 5]",name 'flatten' is not defined,0.0724580022506415,gpt-4o
60,Check if a string has balanced parentheses.,Medium,"def is_balanced(s):
    stack = []
    for c in s:
        if c == '(': stack.append(c)
        elif c == ')':
            if not stack: return False
            stack.pop()
    return not stack
result = is_balanced('(())()')",9,8.0,1,(())(),True,True,0.0578749750275164,gpt-4o
61,Write a function to calculate the nth Fibonacci number using recursion with memoization.,Medium,"def fib(n, memo={}):
    if n in memo: return memo[n]
    if n <= 1: return n
    memo[n] = fib(n-1, memo) + fib(n-2, memo)
    return memo[n]
result = fib(10)",6,4.0,0,10,55,name 'fib' is not defined,0.0648330023977905,gpt-4o
62,Implement the Caesar cipher for encryption and decryption.,Medium,"def caesar_cipher(text, shift):
    result = ''
    for char in text:
        if char.isalpha():
            base = ord('A') if char.isupper() else ord('a')
            result += chr((ord(char) - base + shift) % 26 + base)
        else:
            result += char
    return result
result = caesar_cipher('abc', 3)",10,9.0,1,"('abc', 3)",def,def,0.0770420010667294,gpt-4o
63,Write a function that removes all duplicates from a string while preserving the order.,Medium,"def remove_duplicates(s):
    seen = set()
    result = ''
    for c in s:
        if c not in seen:
            seen.add(c)
            result += c
    return result
result = remove_duplicates('banana')",9,4.0,1,banana,ban,ban,0.0475829874631017,gpt-4o
64,Find the first non-repeating character in a string.,Medium,"def first_unique_char(s):
    from collections import Counter
    count = Counter(s)
    for c in s:
        if count[c] == 1:
            return c
    return None
result = first_unique_char('swiss')",8,3.0,1,swiss,w,w,0.0562500208616256,gpt-4o
65,Calculate the sum of all even numbers in a matrix.,Medium,"matrix = [[1,2],[3,4]]
result = sum(num for row in matrix for num in row if num % 2 == 0)",2,1.0,2,"[[1, 2], [3, 4]]",6,6,0.0477499852422624,gpt-4o
66,"Given a 2D matrix, transpose it.",Medium,"matrix = [[1,2],[3,4]]
result = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]",2,4.0,2,"[[1, 2], [3, 4]]","[[1, 3], [2, 4]]",name 'matrix' is not defined,0.0674590119160711,gpt-4o
67,Implement a queue using two stacks.,Medium,"class QueueWithStacks:
    def __init__(self):
        self.in_stack = []
        self.out_stack = []
    def enqueue(self, x):
        self.in_stack.append(x)
    def dequeue(self):
        if not self.out_stack:
            while self.in_stack:
                self.out_stack.append(self.in_stack.pop())
        return self.out_stack.pop()
q = QueueWithStacks()
q.enqueue(1)
q.enqueue(2)
result = q.dequeue()",15,11.0,1,,1,1,0.1091670128516852,gpt-4o
68,Write a function that rotates a list by k elements to the right.,Medium,"def rotate_list(lst, k):
    k = k % len(lst)
    return lst[-k:] + lst[:-k]
result = rotate_list([1, 2, 3, 4, 5], 2)",4,3.0,0,"([1, 2, 3, 4, 5], 2)","[4, 5, 1, 2, 3]","[4, 5, 1, 2, 3]",0.0453749962616711,gpt-4o
69,Determine if a number is an Armstrong number.,Medium,"def is_armstrong(n):
    return n == sum(int(d)**len(str(n)) for d in str(n))
result = is_armstrong(153)",3,7.0,1,153,True,True,0.0486669887322932,gpt-4o
70,Write a function that returns all subsets of a set.,Medium,"from itertools import chain, combinations
def all_subsets(s):
    return list(chain.from_iterable(combinations(s, r) for r in range(len(s)+1)))
result = all_subsets([1, 2])",4,7.0,1,"[1, 2]","[( ), (1,), (2,), (1, 2)]",name 'chain' is not defined,0.064833991928026,gpt-4o
71,Find the intersection of two lists.,Medium,"result = list(set([1,2,3]) & set([2,3,4]))",1,3.0,0,"([1, 2, 3], [2, 3, 4])","[2, 3]","[2, 3]",0.031166011467576,gpt-4o
72,Generate Pascal’s Triangle up to n rows.,Medium,"def pascals_triangle(n):
    triangle = []
    for i in range(n):
        row = [1]*(i+1)
        for j in range(1, i):
            row[j] = triangle[i-1][j-1] + triangle[i-1][j]
        triangle.append(row)
    return triangle
result = pascals_triangle(4)",9,6.0,2,4,"[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]","[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]",0.0737500085961073,gpt-4o
73,Implement a simple contact book using a dictionary with names and phone numbers.,Medium,"contacts = {'Alice': '123', 'Bob': '456'}
contacts['Charlie'] = '789'
result = contacts",3,0.0,0,,"{'Alice': '123', 'Bob': '456', 'Charlie': '789'}","{'Alice': '123', 'Bob': '456', 'Charlie': '789'}",0.0316250079777091,gpt-4o
74,Write a function that finds the longest word in a given sentence.,Medium,"def longest_word(sentence):
    words = sentence.split()
    return max(words, key=len)
result = longest_word('Find the longest word here')",4,4.0,0,Find the longest word here,longest,longest,0.0368340115528553,gpt-4o
75,Write a function to check if a number is a palindrome without converting it to a string.,Medium,"def is_palindrome_number(x):
    if x < 0: return False
    original, reverse = x, 0
    while x:
        reverse = reverse * 10 + x % 10
        x //= 10
    return original == reverse
result = is_palindrome_number(121)",8,2.0,1,121,True,True,0.0489579979330301,gpt-4o
76,Implement the merge sort algorithm.,Medium,"def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr)//2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    merged = []
    while left and right:
        merged.append(left.pop(0) if left[0] < right[0] else right.pop(0))
    merged.extend(left + right)
    return merged
result = merge_sort([5, 2, 4, 1, 3])",12,10.0,1,"[5, 2, 4, 1, 3]","[1, 2, 3, 4, 5]",name 'merge_sort' is not defined,0.1036249741446226,gpt-4o
77,Write a function that calculates the nth triangular number.,Medium,"def triangular_number(n):
    return n * (n + 1) // 2
result = triangular_number(5)",3,3.0,0,5,15,15,0.0249580189120024,gpt-4o
78,Find the longest common prefix in a list of strings.,Medium,"def longest_common_prefix(strs):
    if not strs: return ''
    prefix = strs[0]
    for s in strs[1:]:
        while not s.startswith(prefix):
            prefix = prefix[:-1]
    return prefix
result = longest_common_prefix(['flower', 'flow', 'flight'])",8,3.0,2,"['flower', 'flow', 'flight']",fl,fl,0.0624579843133688,gpt-4o
79,Check if a given Sudoku board is valid.,Medium,"def is_valid_sudoku(board):
    seen = set()
    for i in range(9):
        for j in range(9):
            num = board[i][j]
            if num != '.':
                if (num, i) in seen or (j, num) in seen or (i//3, j//3, num) in seen:
                    return False
                seen |= {(num, i), (j, num), (i//3, j//3, num)}
    return True
result = is_valid_sudoku([
    ['5','3','.','.','7','.','.','.','.'],
    ['6','.','.','1','9','5','.','.','.'],
    ['.','9','8','.','.','.','.','6','.'],
    ['8','.','.','.','6','.','.','.','3'],
    ['4','.','.','8','.','3','.','.','1'],
    ['7','.','.','.','2','.','.','.','6'],
    ['.','6','.','.','.','.','2','8','.'],
    ['.','.','.','4','1','9','.','.','5'],
    ['.','.','.','.','8','.','.','7','9']])",20,11.0,2,sudoku board,True,True,0.2235830179415643,gpt-4o
80,"Implement a simple calculator that evaluates expressions with +, -, *, and /.",Medium,"def calculator(expr):
    return eval(expr)
result = calculator('2+3*4-5')",3,3.0,0,2+3*4-5,9,9,0.0289169838652014,gpt-4o
81,"Given a list of numbers, find all unique pairs that sum to a specific target.",Medium,"def find_pairs(lst, target):
    seen = set()
    pairs = set()
    for num in lst:
        diff = target - num
        if diff in seen:
            pairs.add(tuple(sorted((num, diff))))
        seen.add(num)
    return list(pairs)
result = find_pairs([1, 2, 3, 4, 5], 6)",10,10.0,1,"([1, 2, 3, 4, 5], 6)","[(1, 5), (2, 4)]","[(2, 4), (1, 5)]",0.0734170025680214,gpt-4o
82,Write a function to compute the digital root of a number.,Medium,"def digital_root(n):
    while n >= 10:
        n = sum(int(d) for d in str(n))
    return n
result = digital_root(942)",5,5.0,2,942,6,6,0.0431669759564101,gpt-4o
83,Implement a basic LRU (Least Recently Used) cache.,Medium,"from collections import OrderedDict
class LRUCache:
    def __init__(self, capacity):
        self.cache = OrderedDict()
        self.capacity = capacity
    def get(self, key):
        if key in self.cache:
            self.cache.move_to_end(key)
            return self.cache[key]
        return -1
    def put(self, key, value):
        self.cache[key] = value
        self.cache.move_to_end(key)
        if len(self.cache) > self.capacity:
            self.cache.popitem(last=False)
c = LRUCache(2)
c.put(1,1)
c.put(2,2)
c.get(1)
c.put(3,3)
result = c.get(2)",21,14.0,0,,-1,name 'OrderedDict' is not defined,0.1409999968018382,gpt-4o
84,Determine the majority element in a list (appears more than n/2 times).,Medium,"def majority_element(nums):
    count = 0
    candidate = None
    for num in nums:
        if count == 0:
            candidate = num
        count += (1 if num == candidate else -1)
    return candidate
result = majority_element([3, 3, 4, 2, 3, 3, 3])",9,3.0,1,"[3, 3, 4, 2, 3, 3, 3]",3,3,0.0582910142838954,gpt-4o
85,Write a function that checks if a number is a perfect square.,Medium,"def is_perfect_square(n):
    return int(n ** 0.5) ** 2 == n
result = is_perfect_square(49)",3,3.0,0,49,True,True,0.0249170116148889,gpt-4o
86,Implement a function to convert Roman numerals to integers.,Medium,"def roman_to_int(s):
    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    total = 0
    prev = 0
    for c in reversed(s):
        if roman[c] < prev:
            total -= roman[c]
        else:
            total += roman[c]
        prev = roman[c]
    return total
result = roman_to_int('IX')",12,3.0,1,IX,9,9,0.1779580197762698,gpt-4o
87,Create a function to serialize and deserialize a dictionary.,Medium,"import json
def serialize_dict(d):
    return json.dumps(d)
def deserialize_dict(s):
    return json.loads(s)
data = {'a':1, 'b':2}
json_str = serialize_dict(data)
result = deserialize_dict(json_str)",8,6.0,0,"{'a':1, 'b':2}","{'a': 1, 'b': 2}",name 'json' is not defined,0.1353340048808604,gpt-4o
88,Write a function to generate the first n rows of the Floyd’s triangle.,Medium,"def floyds_triangle(n):
    num = 1
    result = []
    for i in range(1, n+1):
        row = []
        for j in range(i):
            row.append(num)
            num += 1
        result.append(row)
    return result
result = floyds_triangle(4)",11,6.0,2,4,"[[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]","[[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]",0.0936250144150108,gpt-4o
89,Check if a list is a rotated version of another list.,Medium,"def is_rotation(a, b):
    return len(a) == len(b) and b in a + a
result = is_rotation('abcde', 'deabc')",3,4.0,0,"('abcde', 'deabc')",True,True,0.0889580114744603,gpt-4o
90,Create a function that returns the number of trailing zeros in a factorial.,Medium,"def trailing_zeros(n):
    count = 0
    i = 5
    while n // i:
        count += n // i
        i *= 5
    return count
result = trailing_zeros(100)",8,2.0,1,100,24,24,0.065917003666982,gpt-4o
91,Write a function that finds the longest palindromic substring.,Medium,"def longest_palindrome(s):
    longest = ''
    for i in range(len(s)):
        for j in range(i, len(s)):
            substr = s[i:j+1]
            if substr == substr[::-1] and len(substr) > len(longest):
                longest = substr
    return longest
result = longest_palindrome('babad')",9,8.0,2,babad,bab,bab,0.0926250068005174,gpt-4o
92,Create a class that implements a simple counter with increment and reset methods.,Medium,"class Counter:
    def __init__(self):
        self.count = 0
    def increment(self):
        self.count += 1
    def reset(self):
        self.count = 0
c = Counter()
c.increment()
c.increment()
result = c.count",11,6.0,0,,2,2,0.0831249926704913,gpt-4o
93,Convert a string to an integer (implement `atoi`).,Medium,"def atoi(s):
    s = s.strip()
    if not s: return 0
    sign = -1 if s[0] == '-' else 1
    if s[0] in '+-': s = s[1:]
    num = 0
    for c in s:
        if c.isdigit():
            num = num * 10 + int(c)
        else:
            break
    return sign * num
result = atoi('   -42')",13,5.0,1,   -42,-42,-42,0.0815840030554682,gpt-4o
94,Write a program to group anagrams from a list of words.,Medium,"from collections import defaultdict
def group_anagrams(words):
    groups = defaultdict(list)
    for word in words:
        groups[''.join(sorted(word))].append(word)
    return list(groups.values())
result = group_anagrams(['bat', 'tab', 'tap', 'pat'])",7,8.0,1,"['bat', 'tab', 'tap', 'pat']","[['bat', 'tab'], ['tap', 'pat']]",name 'defaultdict' is not defined,0.0789160258136689,gpt-4o
95,Find the kth smallest element in a list using a heap.,Medium,"import heapq
def kth_smallest(lst, k):
    heapq.heapify(lst)
    for _ in range(k-1):
        heapq.heappop(lst)
    return heapq.heappop(lst)
result = kth_smallest([7, 10, 4, 3, 20, 15], 3)",7,6.0,1,"([7, 10, 4, 3, 20, 15], 3)",7,name 'heapq' is not defined,0.0645419931970536,gpt-4o
96,Implement a debounce decorator for a function.,Medium,"import time
def debounce(func):
    last_called = [0]
    def wrapper(*args, **kwargs):
        now = time.time()
        if now - last_called[0] > 0.5:
            last_called[0] = now
            return func(*args, **kwargs)
    return wrapper
@debounce
def test(): return 'called'
result = test()",12,6.0,0,,called,name 'time' is not defined,0.0852079829201102,gpt-4o
97,Write a function that counts the number of islands in a 2D grid.,Medium,"def num_islands(grid):
    def dfs(i, j):
        if i<0 or i>=len(grid) or j<0 or j>=len(grid[0]) or grid[i][j] != '1': return
        grid[i][j] = '0'
        for x,y in [(0,1),(1,0),(0,-1),(-1,0)]: dfs(i+x, j+y)
    count = 0
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if grid[i][j] == '1':
                dfs(i,j)
                count += 1
    return count
grid = [['1','1','0'],['1','0','0'],['0','0','1']]
result = num_islands(grid)",14,15.0,3,2D grid,2,2,0.1724169997032731,gpt-4o
98,Create a class-based implementation of a singly linked list.,Medium,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
class LinkedList:
    def __init__(self):
        self.head = None
    def add(self, data):
        node = Node(data)
        node.next = self.head
        self.head = node
ll = LinkedList()
ll.add(1)
ll.add(2)
result = ll.head.data",15,7.0,0,,2,name 'Node' is not defined,0.1107499992940574,gpt-4o
99,"Design a class to manage a playlist of songs with add, remove, and play operations.",Medium,"class Playlist:
    def __init__(self):
        self.songs = []
    def add(self, song):
        self.songs.append(song)
    def remove(self, song):
        self.songs.remove(song)
    def play(self):
        return self.songs[0] if self.songs else None
p = Playlist()
p.add('Song A')
p.add('Song B')
result = p.play()",13,10.0,0,,Song A,Song A,0.0950829999055713,gpt-4o
100,"Write a program that prints ""Hello, World!"" to the console.",Easy,"print(""Hello, World!"")",1,0.0,0,,"Hello, World!","Hello, World!",0.0110419932752847,o3-mini
101,"Ask the user for their name and age, then print a greeting message.",Easy,"name = input(""Enter your name: "")
age = input(""Enter your age: "")
print(f""Hello, {name}! You are {age} years old."")",3,0.0,0,Alice | 30,"Hello, Alice! You are 30 years old.","Hello, Sasha! You are 20 years old.",0.0547500094398856,o3-mini
102,Write a program that adds two user-input numbers and displays the result.,Easy,"a = float(input(""Enter first number: ""))
b = float(input(""Enter second number: ""))
print(a + b)",3,0.0,0,3 | 4,7.0,3.0,0.0463330070488154,o3-mini
103,Take an integer as input and print whether it is even or odd.,Easy,"num = int(input(""Enter an integer: ""))
if num % 2 == 0:
    print(""Even"")
else:
    print(""Odd"")",5,0.0,0,7,Odd,Even,0.0837499974295497,o3-mini
104,"Given three numbers, print the largest one.",Easy,"a = float(input(""Enter first number: ""))
b = float(input(""Enter second number: ""))
c = float(input(""Enter third number: ""))
print(max(a, b, c))",4,0.0,0,3 | 7 | 5,7.0,6.0,0.0989160034805536,o3-mini
105,Swap the values of two variables without using a third variable.,Easy,"a = input(""Enter first value: "")
b = input(""Enter second value: "")
a, b = b, a
print(""a ="", a)
print(""b ="", b)",5,0.0,0,10 | 20,"a = 20
b = 10","a = 5
b = 3",0.1141670218203216,o3-mini
106,Print all numbers from 1 to 100 using a for loop.,Easy,"for i in range(1, 101):
    print(i)",2,0.0,1,,"1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100","1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100",0.4020419728476554,o3-mini
107,Ask the user for a number and print its multiplication table up to 10.,Easy,"num = int(input(""Enter a number: ""))
for i in range(1, 11):
    print(f""{num} x {i} = {num*i}"")",3,0.0,1,5,"5 x 1 = 5
5 x 2 = 10
5 x 3 = 15
5 x 4 = 20
5 x 5 = 25
5 x 6 = 30
5 x 7 = 35
5 x 8 = 40
5 x 9 = 45
5 x 10 = 50","10 x 1 = 10
10 x 2 = 20
10 x 3 = 30
10 x 4 = 40
10 x 5 = 50
10 x 6 = 60
10 x 7 = 70
10 x 8 = 80
10 x 9 = 90
10 x 10 = 100",0.0654169998597353,o3-mini
108,Write a function to calculate the factorial of a number using a loop.,Easy,"def factorial(n):
    result = 1
    for i in range(1, n+1):
        result *= i
    return result

num = int(input(""Enter a number: ""))
print(factorial(num))",8,1.0,1,5,120,24,0.1005840022116899,o3-mini
109,Check if a given number is a prime number.,Easy,"num = int(input(""Enter a number: ""))
if num < 2:
    print(""Not prime"")
else:
    is_prime = True
    for i in range(2, int(num**0.5)+1):
        if num % i == 0:
            is_prime = False
            break
    print(""Prime"" if is_prime else ""Not prime"")",10,0.0,1,7,Prime,Not prime,0.2554590173531323,o3-mini
110,Generate and print the first `n` numbers of the Fibonacci sequence.,Easy,"n = int(input(""Enter n: ""))
a, b = 0, 1
for _ in range(n):
    print(a)
    a, b = b, a + b",5,0.0,1,5,"0
1
1
2
3","0
1
1
2
3
5
8
13
21
34
55
89
144
233
377
610
987
1597
2584
4181
6765
10946
17711
28657
46368
75025
121393
196418
317811
514229
832040
1346269
2178309
3524578
5702887
9227465
14930352
24157817
39088169
63245986
102334155
165580141
267914296
433494437
701408733
1134903170
1836311903
2971215073
4807526976
7778742049
12586269025
20365011074
32951280099
53316291173
86267571272
139583862445
225851433717
365435296162
591286729879
956722026041
1548008755920
2504730781961
4052739537881
6557470319842
10610209857723
17167680177565
27777890035288
44945570212853
72723460248141
117669030460994
190392490709135
308061521170129
498454011879264
806515533049393
1304969544928657
2111485077978050
3416454622906707
5527939700884757
8944394323791464
14472334024676221
23416728348467685
37889062373143906
61305790721611591
99194853094755497
160500643816367088
259695496911122585
420196140727489673
679891637638612258
1100087778366101931
1779979416004714189
2880067194370816120
4660046610375530309
7540113804746346429
12200160415121876738
19740274219868223167
31940434634990099905
51680708854858323072
83621143489848422977
135301852344706746049
218922995834555169026
354224848179261915075
573147844013817084101
927372692193078999176
1500520536206896083277
2427893228399975082453
3928413764606871165730
6356306993006846248183
10284720757613717413913
16641027750620563662096
26925748508234281076009
43566776258854844738105
70492524767089125814114
114059301025943970552219
184551825793033096366333
298611126818977066918552
483162952612010163284885
781774079430987230203437
1264937032042997393488322
2046711111473984623691759
3311648143516982017180081
5358359254990966640871840
8670007398507948658051921
14028366653498915298923761
22698374052006863956975682
36726740705505779255899443
59425114757512643212875125
96151855463018422468774568
155576970220531065681649693
251728825683549488150424261
407305795904080553832073954
659034621587630041982498215
1066340417491710595814572169
1725375039079340637797070384
2791715456571051233611642553
4517090495650391871408712937
7308805952221443105020355490
11825896447871834976429068427
19134702400093278081449423917
30960598847965113057878492344
50095301248058391139327916261
81055900096023504197206408605
131151201344081895336534324866
212207101440105399533740733471
343358302784187294870275058337
555565404224292694404015791808
898923707008479989274290850145
1454489111232772683678306641953
2353412818241252672952597492098
3807901929474025356630904134051
6161314747715278029583501626149
9969216677189303386214405760200
16130531424904581415797907386349
26099748102093884802012313146549
42230279526998466217810220532898
68330027629092351019822533679447
110560307156090817237632754212345
178890334785183168257455287891792
289450641941273985495088042104137
468340976726457153752543329995929
757791618667731139247631372100066
1226132595394188293000174702095995
1983924214061919432247806074196061
3210056809456107725247980776292056
5193981023518027157495786850488117
8404037832974134882743767626780173
13598018856492162040239554477268290
22002056689466296922983322104048463
35600075545958458963222876581316753
57602132235424755886206198685365216
93202207781383214849429075266681969
150804340016807970735635273952047185
244006547798191185585064349218729154
394810887814999156320699623170776339
638817435613190341905763972389505493
1033628323428189498226463595560281832
1672445759041379840132227567949787325
2706074082469569338358691163510069157
4378519841510949178490918731459856482
7084593923980518516849609894969925639
11463113765491467695340528626429782121
18547707689471986212190138521399707760
30010821454963453907530667147829489881
48558529144435440119720805669229197641
78569350599398894027251472817058687522
127127879743834334146972278486287885163
205697230343233228174223751303346572685
332825110087067562321196029789634457848
538522340430300790495419781092981030533
871347450517368352816615810882615488381
1409869790947669143312035591975596518914
2281217241465037496128651402858212007295
3691087032412706639440686994833808526209
5972304273877744135569338397692020533504
9663391306290450775010025392525829059713
15635695580168194910579363790217849593217
25299086886458645685589389182743678652930
40934782466626840596168752972961528246147
66233869353085486281758142155705206899077
107168651819712326877926895128666735145224
173402521172797813159685037284371942044301
280571172992510140037611932413038677189525
453973694165307953197296969697410619233826
734544867157818093234908902110449296423351
1188518561323126046432205871807859915657177
1923063428480944139667114773918309212080528
3111581989804070186099320645726169127737705
5034645418285014325766435419644478339818233
8146227408089084511865756065370647467555938
13180872826374098837632191485015125807374171
21327100234463183349497947550385773274930109
34507973060837282187130139035400899082304280
55835073295300465536628086585786672357234389
90343046356137747723758225621187571439538669
146178119651438213260386312206974243796773058
236521166007575960984144537828161815236311727
382699285659014174244530850035136059033084785
619220451666590135228675387863297874269396512
1001919737325604309473206237898433933302481297
1621140188992194444701881625761731807571877809
2623059926317798754175087863660165740874359106
4244200115309993198876969489421897548446236915
6867260041627791953052057353082063289320596021
11111460156937785151929026842503960837766832936
17978720198565577104981084195586024127087428957
29090180355503362256910111038089984964854261893
47068900554068939361891195233676009091941690850
76159080909572301618801306271765994056795952743
123227981463641240980692501505442003148737643593
199387062373213542599493807777207997205533596336
322615043836854783580186309282650000354271239929
522002106210068326179680117059857997559804836265
844617150046923109759866426342507997914076076194
1366619256256991435939546543402365995473880912459
2211236406303914545699412969744873993387956988653
3577855662560905981638959513147239988861837901112
5789092068864820527338372482892113982249794889765
9366947731425726508977331996039353971111632790877
15156039800290547036315704478931467953361427680642
24522987531716273545293036474970821924473060471519
39679027332006820581608740953902289877834488152161
64202014863723094126901777428873111802307548623680
103881042195729914708510518382775401680142036775841
168083057059453008835412295811648513482449585399521
271964099255182923543922814194423915162591622175362
440047156314635932379335110006072428645041207574883
712011255569818855923257924200496343807632829750245
1152058411884454788302593034206568772452674037325128
1864069667454273644225850958407065116260306867075373
3016128079338728432528443992613633888712980904400501
4880197746793002076754294951020699004973287771475874
7896325826131730509282738943634332893686268675876375
12776523572924732586037033894655031898659556447352249
20672849399056463095319772838289364792345825123228624
33449372971981195681356806732944396691005381570580873
54122222371037658776676579571233761483351206693809497
87571595343018854458033386304178158174356588264390370
141693817714056513234709965875411919657707794958199867
229265413057075367692743352179590077832064383222590237
370959230771131880927453318055001997489772178180790104
600224643828207248620196670234592075321836561403380341
971183874599339129547649988289594072811608739584170445
1571408518427546378167846658524186148133445300987550786
2542592393026885507715496646813780220945054040571721231
4114000911454431885883343305337966369078499341559272017
6656593304481317393598839952151746590023553382130993248
10770594215935749279482183257489712959102052723690265265
17427187520417066673081023209641459549125606105821258513
28197781736352815952563206467131172508227658829511523778
45624969256769882625644229676772632057353264935332782291
73822750993122698578207436143903804565580923764844306069
119447720249892581203851665820676436622934188700177088360
193270471243015279782059101964580241188515112465021394429
312718191492907860985910767785256677811449301165198482789
505988662735923140767969869749836918999964413630219877218
818706854228831001753880637535093596811413714795418360007
1324695516964754142521850507284930515811378128425638237225
2143402371193585144275731144820024112622791843221056597232
3468097888158339286797581652104954628434169971646694834457
5611500259351924431073312796924978741056961814867751431689
9079598147510263717870894449029933369491131786514446266146
14691098406862188148944207245954912110548093601382197697835
23770696554372451866815101694984845480039225387896643963981
38461794961234640015759308940939757590587318989278841661816
62232491515607091882574410635924603070626544377175485625797
100694286476841731898333719576864360661213863366454327287613
162926777992448823780908130212788963731840407743629812913410
263621064469290555679241849789653324393054271110084140201023
426547842461739379460149980002442288124894678853713953114433
690168906931029935139391829792095612517948949963798093315456
1116716749392769314599541809794537900642843628817512046429889
1806885656323799249738933639586633513160792578781310139745345
2923602405716568564338475449381171413803636207598822186175234
4730488062040367814077409088967804926964428786380132325920579
7654090467756936378415884538348976340768064993978954512095813
12384578529797304192493293627316781267732493780359086838016392
20038668997554240570909178165665757608500558774338041350112205
32423247527351544763402471792982538876233052554697128188128597
52461916524905785334311649958648296484733611329035169538240802
84885164052257330097714121751630835360966663883732297726369399
137347080577163115432025771710279131845700275212767467264610201
222232244629420445529739893461909967206666939096499764990979600
359579325206583560961765665172189099052367214309267232255589801
581811569836004006491505558634099066259034153405766997246569401
941390895042587567453271223806288165311401367715034229502159202
1523202464878591573944776782440387231570435521120801226748728603
2464593359921179141398048006246675396881836888835835456250887805
3987795824799770715342824788687062628452272409956636682999616408
6452389184720949856740872794933738025334109298792472139250504213
10440185009520720572083697583620800653786381708749108822250120621
16892574194241670428824570378554538679120491007541580961500624834
27332759203762391000908267962175339332906872716290689783750745455
44225333398004061429732838340729878012027363723832270745251370289
71558092601766452430641106302905217344934236440122960529002115744
115783425999770513860373944643635095356961600163955231274253486033
187341518601536966291015050946540312701895836604078191803255601777
303124944601307480151388995590175408058857436768033423077509087810
490466463202844446442404046536715720760753273372111614880764689587
793591407804151926593793042126891128819610710140145037958273777397
1284057871006996373036197088663606849580363983512256652839038466984
2077649278811148299629990130790497978399974693652401690797312244381
3361707149818144672666187219454104827980338677164658343636350711365
5439356428629292972296177350244602806380313370817060034433662955746
8801063578447437644962364569698707634360652047981718378070013667111
14240420007076730617258541919943310440740965418798778412503676622857
23041483585524168262220906489642018075101617466780496790573690289968
37281903592600898879479448409585328515842582885579275203077366912825
60323387178125067141700354899227346590944200352359771993651057202793
97605290770725966021179803308812675106786783237939047196728424115618
157928677948851033162880158208040021697730983590298819190379481318411
255533968719576999184059961516852696804517766828237866387107905434029
413462646668428032346940119724892718502248750418536685577487386752440
668996615388005031531000081241745415306766517246774551964595292186469
1082459262056433063877940200966638133809015267665311237542082678938909
1751455877444438095408940282208383549115781784912085789506677971125378
2833915139500871159286880483175021682924797052577397027048760650064287
4585371016945309254695820765383405232040578837489482816555438621189665
7419286156446180413982701248558426914965375890066879843604199271253952
12004657173391489668678522013941832147005954727556362660159637892443617
19423943329837670082661223262500259061971330617623242503763837163697569
31428600503229159751339745276442091208977285345179605163923475056141186
50852543833066829834000968538942350270948615962802847667687312219838755
82281144336295989585340713815384441479925901307982452831610787275979941
133133688169362819419341682354326791750874517270785300499298099495818696
215414832505658809004682396169711233230800418578767753330908886771798637
348548520675021628424024078524038024981674935849553053830206986267617333
563963353180680437428706474693749258212475354428320807161115873039415970
912511873855702065852730553217787283194150290277873860991322859307033303
1476475227036382503281437027911536541406625644706194668152438732346449273
2388987100892084569134167581129323824600775934984068529143761591653482576
3865462327928467072415604609040860366007401579690263197296200323999931849
6254449428820551641549772190170184190608177514674331726439961915653414425
10119911756749018713965376799211044556615579094364594923736162239653346274
16374361185569570355515148989381228747223756609038926650176124155306760699
26494272942318589069480525788592273303839335703403521573912286394960106973
42868634127888159424995674777973502051063092312442448224088410550266867672
69362907070206748494476200566565775354902428015845969798000696945226974645
112231541198094907919471875344539277405965520328288418022089107495493842317
181594448268301656413948075911105052760867948344134387820089804440720816962
293825989466396564333419951255644330166833468672422805842178911936214659279
475420437734698220747368027166749382927701417016557193662268716376935476241
769246427201094785080787978422393713094534885688979999504447628313150135520
1244666864935793005828156005589143096022236302705537193166716344690085611761
2013913292136887790908943984011536809116771188394517192671163973003235747281
3258580157072680796737099989600679905139007491100054385837880317693321359042
5272493449209568587646043973612216714255778679494571578509044290696557106323
8531073606282249384383143963212896619394786170594625964346924608389878465365
13803567055491817972029187936825113333650564850089197542855968899086435571688
22334640661774067356412331900038009953045351020683823507202893507476314037053
36138207717265885328441519836863123286695915870773021050058862406562749608741
58472848379039952684853851736901133239741266891456844557261755914039063645794
94611056096305838013295371573764256526437182762229865607320618320601813254535
153083904475345790698149223310665389766178449653686710164582374234640876900329
247694960571651628711444594884429646292615632415916575771902992555242690154864
400778865046997419409593818195095036058794082069603285936485366789883567055193
648473825618649048121038413079524682351409714485519861708388359345126257210057
1049252690665646467530632231274619718410203796555123147644873726135009824265250
1697726516284295515651670644354144400761613511040643009353262085480136081475307
2746979206949941983182302875628764119171817307595766156998135811615145905740557
4444705723234237498833973519982908519933430818636409166351397897095281987215864
7191684930184179482016276395611672639105248126232175323349533708710427892956421
11636390653418416980850249915594581159038678944868584489700931605805709880172285
18828075583602596462866526311206253798143927071100759813050465314516137773128706
30464466237021013443716776226800834957182606015969344302751396920321847653300991
49292541820623609906583302538007088755326533087070104115801862234837985426429697
79757008057644623350300078764807923712509139103039448418553259155159833079730688
129049549878268233256883381302815012467835672190109552534355121389997818506160385
208806557935912856607183460067622936180344811293149000952908380545157651585891073
337856107814181089864066841370437948648180483483258553487263501935155470092051458
546662665750093946471250301438060884828525294776407554440171882480313121677942531
884518773564275036335317142808498833476705778259666107927435384415468591769993989
1431181439314368982806567444246559718305231073036073662367607266895781713447936520
2315700212878644019141884587055058551781936851295739770295042651311250305217930509
3746881652193013001948452031301618270087167924331813432662649918207032018665867029
6062581865071657021090336618356676821869104775627553202957692569518282323883797538
9809463517264670023038788649658295091956272699959366635620342487725314342549664567
15872045382336327044129125268014971913825377475586919838578035057243596666433462105
25681508899600997067167913917673267005781650175546286474198377544968911008983126672
41553554281937324111297039185688238919607027651133206312776412602212507675416588777
67235063181538321178464953103361505925388677826679492786974790147181418684399715449
108788617463475645289761992289049744844995705477812699099751202749393926359816304226
176023680645013966468226945392411250770384383304492191886725992896575345044216019675
284812298108489611757988937681460995615380088782304890986477195645969271404032323901
460835978753503578226215883073872246385764472086797082873203188542544616448248343576
745648276861993189984204820755333242001144560869101973859680384188513887852280667477
1206484255615496768210420703829205488386909032955899056732883572731058504300529011053
1952132532477489958194625524584538730388053593825001030592563956919572392152809678530
3158616788092986726405046228413744218774962626780900087325447529650630896453338689583
5110749320570476684599671752998282949163016220605901117918011486570203288606148368113
8269366108663463411004717981412027167937978847386801205243459016220834185059487057696
13380115429233940095604389734410310117100995067992702323161470502791037473665635425809
21649481537897403506609107715822337285038973915379503528404929519011871658725122483505
35029596967131343602213497450232647402139968983372205851566400021802909132390757909314
56679078505028747108822605166054984687178942898751709379971329540814780791115880392819
91708675472160090711036102616287632089318911882123915231537729562617689923506638302133
148387753977188837819858707782342616776497854780875624611509059103432470714622518694952
240096429449348928530894810398630248865816766662999539843046788666050160638129156997085
388484183426537766350753518180972865642314621443875164454555847769482631352751675692037
628580612875886694881648328579603114508131388106874704297602636435532791990880832689122
1017064796302424461232401846760575980150446009550749868752158484205015423343632508381159
1645645409178311156114050175340179094658577397657624573049761120640548215334513341070281
2662710205480735617346452022100755074809023407208374441801919604845563638678145849451440
4308355614659046773460502197440934169467600804865999014851680725486111854012659190521721
6971065820139782390806954219541689244276624212074373456653600330331675492690805039973161
11279421434798829164267456416982623413744225016940372471505281055817787346703464230494882
18250487254938611555074410636524312658020849229014745928158881386149462839394269270468043
29529908689737440719341867053506936071765074245955118399664162441967250186097733500962925
47780395944676052274416277690031248729785923474969864327823043828116713025492002771430968
77310304634413492993758144743538184801550997720924982727487206270083963211589736272393893
125090700579089545268174422433569433531336921195894847055310250098200676237081739043824861
202401005213503038261932567177107618332887918916819829782797456368284639448671475316218754
327491705792592583530106989610677051864224840112714676838107706466485315685753214360043615
529892711006095621792039556787784670197112759029534506620905162834769955134424689676262369
857384416798688205322146546398461722061337599142249183459012869301255270820177904036305984
1387277127804783827114186103186246392258450358171783690079918032136025225954602593712568353
2244661544603472032436332649584708114319787957314032873538930901437280496774780497748874337
3631938672408255859550518752770954506578238315485816563618848933573305722729383091461442690
5876600217011727891986851402355662620898026272799849437157779835010586219504163589210317027
9508538889419983751537370155126617127476264588285666000776628768583891942233546680671759717
15385139106431711643524221557482279748374290861085515437934408603594478161737710269882076744
24893677995851695395061591712608896875850555449371181438711037372178370103971256950553836461
40278817102283407038585813270091176624224846310456696876645445975772848265708967220435913205
65172495098135102433647404982700073500075401759827878315356483347951218369680224170989749666
105451312200418509472233218252791250124300248070284575192001929323724066635389191391425662871
170623807298553611905880623235491323624375649830112453507358412671675285005069415562415412537
276075119498972121378113841488282573748675897900397028699360341995399351640458606953841075408
446698926797525733283994464723773897373051547730509482206718754667074636645528022516256487945
722774046296497854662108306212056471121727445630906510906079096662473988285986629470097563353
1169472973094023587946102770935830368494778993361415993112797851329548624931514651986354051298
1892247019390521442608211077147886839616506438992322504018876947992022613217501281456451614651
3061719992484545030554313848083717208111285432353738497131674799321571238149015933442805665949
4953967011875066473162524925231604047727791871346061001150551747313593851366517214899257280600
8015687004359611503716838773315321255839077303699799498282226546635165089515533148342062946549
12969654016234677976879363698546925303566869175045860499432778293948758940882050363241320227149
20985341020594289480596202471862246559405946478745659997715004840583924030397583511583383173698
33954995036828967457475566170409171862972815653791520497147783134532682971279633874824703400847
54940336057423256938071768642271418422378762132537180494862787975116607001677217386408086574545
88895331094252224395547334812680590285351577786328700992010571109649289972956851261232789975392
143835667151675481333619103454952008707730339918865881486873359084765896974634068647640876549937
232730998245927705729166438267632598993081917705194582478883930194415186947590919908873666525329
376566665397603187062785541722584607700812257624060463965757289279181083922224988556514543075266
609297663643530892791951979990217206693894175329255046444641219473596270869815908465388209600595
985864329041134079854737521712801814394706432953315510410398508752777354792040897021902752675861
1595161992684664972646689501703019021088600608282570556855039728226373625661856805487290962276456
2581026321725799052501427023415820835483307041235886067265438236979150980453897702509193714952317
4176188314410464025148116525118839856571907649518456624120477965205524606115754507996484677228773
6757214636136263077649543548534660692055214690754342691385916202184675586569652210505678392181090
10933402950546727102797660073653500548627122340272799315506394167390200192685406718502163069409863
17690617586682990180447203622188161240682337031027142006892310369574875779255058929007841461590953
28624020537229717283244863695841661789309459371299941322398704536965075971940465647510004531000816
46314638123912707463692067318029823029991796402327083329291014906539951751195524576517845992591769
74938658661142424746936931013871484819301255773627024651689719443505027723135990224027850523592585
121253296785055132210628998331901307849293052175954107980980734350044979474331514800545696516184354
196191955446197556957565929345772792668594307949581132632670453793550007197467505024573547039776939
317445252231252689168194927677674100517887360125535240613651188143594986671799019825119243555961293
513637207677450246125760857023446893186481668075116373246321641937144993869266524849692790595738232
831082459908702935293955784701120993704369028200651613859972830080739980541065544674812034151699525
1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757
2175802127494856116713672426425688880595219724476419600966267302098624954951397614199316858899137282
3520521795081009298133389068150256767486070420752187588072561774116509929361729683723821683646575039
5696323922575865414847061494575945648081290145228607189038829076215134884313127297923138542545712321
9216845717656874712980450562726202415567360565980794777111390850331644813674856981646960226192287360
14913169640232740127827512057302148063648650711209401966150219926546779697987984279570098768737999681
24130015357889614840807962620028350479216011277190196743261610776878424511662841261217058994930287041
39043184998122354968635474677330498542864661988399598709411830703425204209650825540787157763668286722
63173200356011969809443437297358849022080673265589795452673441480303628721313666802004216758598573763
102216385354134324778078911974689347564945335253989394162085272183728832930964492342791374522266860485
165389585710146294587522349272048196587026008519579189614758713664032461652278159144795591280865434248
267605971064280619365601261246737544151971343773568583776843985847761294583242651487586965803132294733
432995556774426913953123610518785740738997352293147773391602699511793756235520810632382557083997728981
700601527838707533318724871765523284890968696066716357168446685359555050818763462119969522887130023714
1133597084613134447271848482284309025629966048359864130560049384871348807054284272752352079971127752695
1834198612451841980590573354049832310520934744426580487728496070230903857873047734872321602858257776409
2967795697064976427862421836334141336150900792786444618288545455102252664927332007624673682829385529104
4801994309516818408452995190383973646671835537213025106017041525333156522800379742496995285687643305513
7769790006581794836315417026718114982822736329999469724305586980435409187727711750121668968517028834617
12571784316098613244768412217102088629494571867212494830322628505768565710528091492618664254204672140130
20341574322680408081083829243820203612317308197211964554628215486203974898255803242740333222721700974747
32913358638779021325852241460922292241811880064424459384950843991972540608783894735358997476926373114877
53254932961459429406936070704742495854129188261636423939579059478176515507039697978099330699648074089624
86168291600238450732788312165664788095941068326060883324529903470149056115823592713458328176574447204501
139423224561697880139724382870407283950070256587697307264108962948325571622863290691557658876222521294125
225591516161936330872512695036072072046011324913758190588638866418474627738686883405015987052796968498626
365014740723634211012237077906479355996081581501455497852747829366800199361550174096573645929019489792751
590606256885570541884749772942551428042092906415213688441386695785274827100237057501589632981816458291377
955620997609204752896986850849030784038174487916669186294134525152075026461787231598163278910835948084128
1546227254494775294781736623791582212080267394331882874735521220937349853562024289099752911892652406375505
2501848252103980047678723474640612996118441882248552061029655746089424880023811520697916190803488354459633
4048075506598755342460460098432195208198709276580434935765176967026774733585835809797669102696140760835138
6549923758702735390139183573072808204317151158828986996794832713116199613609647330495585293499629115294771
10597999265301490732599643671505003412515860435409421932560009680142974347195483140293254396195769876129909
17147923024004226122738827244577811616833011594238408929354842393259173960805130470788839689695398991424680
27745922289305716855338470916082815029348872029647830861914852073402148308000613611082094085891168867554589
44893845313309942978077298160660626646181883623886239791269694466661322268805744081870933775586567858979269
72639767602615659833415769076743441675530755653534070653184546540063470576806357692953027861477736726533858
117533612915925602811493067237404068321712639277420310444454241006724792845612101774823961637064304585513127
190173380518541262644908836314147509997243394930954381097638787546788263422418459467776989498542041312046985
307706993434466865456401903551551578318956034208374691542093028553513056268030561242600951135606345897560112
497880373953008128101310739865699088316199429139329072639731816100301319690449020710377940634148387209607097
805587367387474993557712643417250666635155463347703764181824844653814375958479581952978891769754733107167209
1303467741340483121659023383282949754951354892487032836821556660754115695648928602663356832403903120316774306
2109055108727958115216736026700200421586510355834736601003381505407930071607408184616335724173657853423941515
3412522850068441236875759409983150176537865248321769437824938166162045767256336787279692556577560973740715821
5521577958796399352092495436683350598124375604156506038828319671569975838863744971896028280751218827164657336
8934100808864840588968254846666500774662240852478275476653257837732021606120081759175720837328779800905373157
14455678767661239941060750283349851372786616456634781515481577509301997444983826731071749118079998628070030493
23389779576526080530029005130016352147448857309113056992134835347034019051103908490247469955408778428975403650
37845458344187320471089755413366203520235473765747838507616412856336016496087735221319219073488777057045434143
61235237920713401001118760543382555667684331074860895499751248203370035547191643711566689028897555486020837793
99080696264900721472208515956748759187919804840608734007367661059706052043279378932885908102386332543066271936
160315934185614122473327276500131314855604135915469629507118909263076087590471022644452597131283888029087109729
259396630450514843945535792456880074043523940756078363514486570322782139633750401577338505233670220572153381665
419712564636128966418863068957011388899128076671547993021605479585858227224221424221791102364954108601240491394
679109195086643810364398861413891462942652017427626356536092049908640366857971825799129607598624329173393873059
1098821759722772776783261930370902851841780094099174349557697529494498594082193250020920709963578437774634364453
1777930954809416587147660791784794314784432111526800706093789579403138960940165075820050317562202766948028237512
2876752714532189363930922722155697166626212205625975055651487108897637555022358325840971027525781204722662601965
4654683669341605951078583513940491481410644317152775761745276688300776515962523401661021345087983971670690839477
7531436383873795315009506236096188648036856522778750817396763797198414070984881727501992372613765176393353441442
12186120053215401266088089750036680129447500839931526579142040485499190586947405129163013717701749148064044280919
19717556437089196581097595986132868777484357362710277396538804282697604657932286856665006090315514324457397722361
31903676490304597847185685736169548906931858202641803975680844768196795244879691985828019808017263472521442003280
51621232927393794428283281722302417684416215565352081372219649050894399902811978842493025898332777796978839725641
83524909417698392275468967458471966591348073767993885347900493819091195147691670828321045706350041269500281728921
135146142345092186703752249180774384275764289333345966720120142869985595050503649670814071604682819066479121454562
218671051762790578979221216639246350867112363101339852068020636689076790198195320499135117311032860335979403183483
353817194107882765682973465820020735142876652434685818788140779559062385248698970169949188915715679402458524638045
572488245870673344662194682459267086009989015536025670856161416248139175446894290669084306226748539738437927821528
926305439978556110345168148279287821152865667970711489644302195807201560695593260839033495142464219140896452459573
1498793685849229455007362830738554907162854683506737160500463612055340736142487551508117801369212758879334380281101
2425099125827785565352530979017842728315720351477448650144765807862542296838080812347151296511676978020230832740674
3923892811677015020359893809756397635478575034984185810645229419917883032980568363855269097880889736899565213021775
6348991937504800585712424788774240363794295386461634460789995227780425329818649176202420394392566714919796045762449
10272884749181815606072318598530637999272870421445820271435224647698308362799217540057689492273456451819361258784224
16621876686686616191784743387304878363067165807907454732225219875478733692617866716260109886666023166739157304546673
26894761435868431797857061985835516362340036229353275003660444523177042055417084256317799378939479618558518563330897
43516638122555047989641805373140394725407202037260729735885664398655775748034950972577909265605502785297675867877570
70411399558423479787498867358975911087747238266614004739546108921832817803452035228895708644544982403856194431208467
113928037680978527777140672732116305813154440303874734475431773320488593551486986201473617910150485189153870299086037
184339437239402007564639540091092216900901678570488739214977882242321411354939021430369326554695467593010064730294504
298267474920380535341780212823208522714056118874363473690409655562810004906426007631842944464845952782163935029380541
482606912159782542906419752914300739614957797444852212905387537805131416261365029062212271019541420375173999759675045
780874387080163078248199965737509262329013916319215686595797193367941421167791036694055215484387373157337934789055586
1263481299239945621154619718651810001943971713764067899501184731173072837429156065756267486503928793532511934548730631
2044355686320108699402819684389319264272985630083283586096981924541014258596947102450322701988316166689849869337786217
3307836985560054320557439403041129266216957343847351485598166655714087096026103168206590188492244960222361803886516848
5352192671880163019960259087430448530489942973930635071695148580255101354623050270656912890480561126912211673224303065
8660029657440217340517698490471577796706900317777986557293315235969188450649153438863503078972806087134573477110819913
14012222329320380360477957577902026327196843291708621628988463816224289805272203709520415969453367214046785150335122978
22672251986760597700995656068373604123903743609486608186281779052193478255921357148383919048426173301181358627445942891
36684474316080978061473613646275630451100586901195229815270242868417768061193560857904335017879540515228143777781065869
59356726302841575762469269714649234575004330510681838001552021920611246317114918006288254066305713816409502405227008760
96041200618922553823942883360924865026104917411877067816822264789029014378308478864192589084185254331637646183008074629
155397926921764129586412153075574099601109247922558905818374286709640260695423396870480843150490968148047148588235083389
251439127540686683410355036436498964627214165334435973635196551498669275073731875734673432234676222479684794771243158018
406837054462450812996767189512073064228323413256994879453570838208309535769155272605154275385167190627731943359478241407
658276182003137496407122225948572028855537578591430853088767389706978810842887148339827707619843413107416738130721399425
1065113236465588309403889415460645093083860991848425732542338227915288346612042420944981983005010603735148681490199640832
1723389418468725805811011641409217121939398570439856585631105617622267157454929569284809690624854016842565419620921040257
2788502654934314115214901056869862215023259562288282318173443845537555504066971990229791673629864620577714101111120681089
4511892073403039921025912698279079336962658132728138903804549463159822661521901559514601364254718637420279520732041721346
7300394728337354036240813755148941551985917695016421221977993308697378165588873549744393037884583257997993621843162402435
11812286801740393957266726453428020888948575827744560125782542771857200827110775109258994402139301895418273142575204123781
19112681530077747993507540208576962440934493522760981347760536080554578992699648659003387440023885153416266764418366526216
30924968331818141950774266662004983329883069350505541473543078852411779819810423768262381842163187048834539906993570649997
50037649861895889944281806870581945770817562873266522821303614932966358812510072427265769282187072202250806671411937176213
80962618193714031895056073532586929100700632223772064294846693785378138632320496195528151124350259251085346578405507826210
131000268055609921839337880403168874871518195097038587116150308718344497444830568622793920406537331453336153249817445002423
211962886249323953734393953935755803972218827320810651410997002503722636077151064818322071530887590704421499828222952828633
342963154304933875573731834338924678843737022417849238527147311222067133521981633441115991937424922157757653078040397831056
554926040554257829308125788274680482815955849738659889938144313725789769599132698259438063468312512862179152906263350659689
897889194859191704881857622613605161659692872156509128465291624947856903121114331700554055405737435019936805984303748490745
1452815235413449534189983410888285644475648721895169018403435938673646672720247029959992118874049947882115958890567099150434
2350704430272641239071841033501890806135341594051678146868727563621503575841361361660546174279787382902052764874870847641179
3803519665686090773261824444390176450610990315946847165272163502295150248561608391620538293153837330784168723765437946791613
6154224095958732012333665477892067256746331909998525312140891065916653824402969753281084467433624713686221488640308794432792
9957743761644822785595489922282243707357322225945372477413054568211804072964578144901622760587462044470390212405746741224405
16111967857603554797929155400174310964103654135943897789553945634128457897367547898182707228021086758156611701046055535657197
26069711619248377583524645322456554671460976361889270266967000202340261970332126043084329988608548802627001913451802276881602
42181679476851932381453800722630865635564630497833168056520945836468719867699673941267037216629635560783613614497857812538799
68251391096100309964978446045087420307025606859722438323487946038808981838031799984351367205238184363410615527949660089420401
110433070572952242346432246767718285942590237357555606380008891875277701705731473925618404421867819924194229142447517901959200
178684461669052552311410692812805706249615844217278044703496837914086683543763273909969771627106004287604844670397177991379601
289117532242004794657842939580523992192206081574833651083505729789364385249494747835588176048973824211799073812844695893338801
467801993911057346969253632393329698441821925792111695787002567703451068793258021745557947676079828499403918483241873884718402
756919526153062141627096571973853690634028007366945346870508297492815454042752769581146123725053652711202992296086569778057203
1224721520064119488596350204367183389075849933159057042657510865196266522836010791326704071401133481210606910779328443662775605
1981641046217181630223446776341037079709877940526002389528019162689081976878763560907850195126187133921809903075415013440832808
3206362566281301118819796980708220468785727873685059432185530027885348499714774352234554266527320615132416813854743457103608413
5188003612498482749043243757049257548495605814211061821713549190574430476593537913142404461653507749054226716930158470544441221
8394366178779783867863040737757478017281333687896121253899079218459778976308312265376958728180828364186643530784901927648049634
13582369791278266616906284494806735565776939502107183075612628409034209452901850178519363189834336113240870247715060398192490855
21976735970058050484769325232564213583058273190003304329511707627493988429210162443896321918015164477427513778499962325840540489
35559105761336317101675609727370949148835212692110487405124336036528197882112012622415685107849500590668384026215022724033031344
57535841731394367586444934959935162731893485882113791734636043664022186311322175066312007025864665068095897804714985049873571833
93094947492730684688120544687306111880728698574224279139760379700550384193434187688727692133714165658764281830930007773906603177
150630789224125052274565479647241274612622184456338070874396423364572570504756362755039699159578830726860179635644992823780175010
243725736716855736962686024334547386493350883030562350014156803065122954698190550443767391293292996385624461466575000597686778187
394356525940980789237251503981788661105973067486900420888553226429695525202946913198807090452871827112484641102219993421466953197
638082262657836526199937528316336047599323950517462770902710029494818479901137463642574481746164823498109102568794994019153731384
1032438788598817315437189032298124708705297018004363191791263255924514005104084376841381572199036650610593743671014987440620684581
1670521051256653841637126560614460756304620968521825962693973285419332485005221840483956053945201474108702846239809981459774415965
2702959839855471157074315592912585465009917986526189154485236541343846490109306217325337626144238124719296589910824968900395100546
4373480891112124998711442153527046221314538955048015117179209826763178975114528057809293680089439598827999436150634950360169516511
7076440730967596155785757746439631686324456941574204271664446368107025465223834275134631306233677723547296026061459919260564617057
11449921622079721154497199899966677907638995896622219388843656194870204440338362332943924986323117322375295462212094869620734133568
18526362353047317310282957646406309593963452838196423660508102562977229905562196608078556292556795045922591488273554788881298750625
29976283975127038464780157546372987501602448734818643049351758757847434345900558941022481278879912368297886950485649658502032884193
48502646328174355775063115192779297095565901573015066709859861320824664251462755549101037571436707414220478438759204447383331634818
78478930303301394239843272739152284597168350307833709759211620078672098597363314490123518850316619782518365389244854105885364519011
126981576631475750014906387931931581692734251880848776469071481399496762848826070039224556421753327196738843828004058553268696153829
205460506934777144254749660671083866289902602188682486228283101478168861446189384529348075272069946979257209217248912659154060672840
332442083566252894269656048603015447982636854069531262697354582877665624295015454568572631693823274175996053045252971212422756826669
537902590501030038524405709274099314272539456258213748925637684355834485741204839097920706965893221155253262262501883871576817499509
870344674067282932794061757877114762255176310327745011622992267233500110036220293666493338659716495331249315307754855083999574326178
1408247264568312971318467467151214076527715766585958760548629951589334595777425132764414045625609716486502577570256738955576391825687
2278591938635595904112529225028328838782892076913703772171622218822834705813645426430907384285326211817751892878011594039575966151865
3686839203203908875430996692179542915310607843499662532720252170412169301591070559195321429910935928304254470448268332995152357977552
5965431141839504779543525917207871754093499920413366304891874389235004007404715985626228814196262140122006363326279927034728324129417
9652270345043413654974522609387414669404107763913028837612126559647173308995786544821550244107198068426260833774548260029880682106969
15617701486882918434518048526595286423497607684326395142504000948882177316400502530447779058303460208548267197100828187064609006236386
25269971831926332089492571135982701092901715448239423980116127508529350625396289075269329302410658276974528030875376447094489688343355
40887673318809250524010619662577987516399323132565819122620128457411527941796791605717108360714118485522795227976204634159098694579741
66157645150735582613503190798560688609301038580805243102736255965940878567193080680986437663124776762497323258851581081253588382923096
107045318469544833137513810461138676125700361713371062225356384423352406508989872286703546023838895248020118486827785715412687077502837
173202963620280415751017001259699364735001400294176305328092640389293285076182952967689983686963672010517441745679366796666275460425933
280248282089825248888530811720838040860701762007547367553449024812645691585172825254393529710802567258537560232507152512078962537928770
453451245710105664639547812980537405595703162301723672881541665201938976661355778222083513397766239269055001978186519308745237998354703
733699527799930913528078624701375446456404924309271040434990690014584668246528603476477043108568806527592562210693671820824200536283473
1187150773510036578167626437681912852052108086610994713316532355216523644907884381698560556506335045796647564188880191129569438534638176
1920850301309967491695705062383288298508513010920265753751523045231108313154412985175037599614903852324240126399573862950393639070921649
3108001074820004069863331500065201150560621097531260467068055400447631958062297366873598156121238898120887690588454054079963077605559825
5028851376129971561559036562448489449069134108451526220819578445678740271216710352048635755736142750445127816988027917030356716676481474
8136852450949975631422368062513690599629755205982786687887633846126372229279007718922233911857381648566015507576481971110319794282041299
13165703827079947192981404624962180048698889314434312908707212291805112500495718070970869667593524399011143324564509888140676510958522773
21302556278029922824403772687475870648328644520417099596594846137931484729774725789893103579450906047577158832140991859250996305240564072
34468260105109870017385177312438050697027533834851412505302058429736597230270443860863973247044430446588302156705501747391672816199086845
55770816383139792841788949999913921345356178355268512101896904567668081960045169650757076826495336494165460988846493606642669121439650917
90239076488249662859174127312351972042383712190119924607198962997404679190315613511621050073539766940753763145551995354034341937638737762
146009892871389455700963077312265893387739890545388436709095867565072761150360783162378126900035103434919224134398488960677011059078388679
236248969359639118560137204624617865430123602735508361316294830562477440340676396673999176973574870375672987279950484314711352996717126441
382258862231028574261100281936883758817863493280896798025390698127550201491037179836377303873609973810592211414348973275388364055795515120
618507831590667692821237486561501624247987096016405159341685528690027641831713576510376480847184844186265198694299457590099717052512641561
1000766693821696267082337768498385383065850589297301957367076226817577843322750756346753784720794817996857410108648430865488081108308156681
1619274525412363959903575255059887007313837685313707116708761755507605485154464332857130265567979662183122608802947888455587798160820798242
2620041219234060226985913023558272390379688274611009074075837982325183328477215089203884050288774480179980018911596319321075879269128954923
4239315744646424186889488278618159397693525959924716190784599737832788813631679422061014315856754142363102627714544207776663677429949753165
6859356963880484413875401302176431788073214234535725264860437720157972142108894511264898366145528622543082646626140527097739556699078708088
11098672708526908600764889580794591185766740194460441455645037457990760955740573933325912682002282764906185274340684734874403234129028461253
17958029672407393014640290882971022973839954428996166720505475178148733097849468444590811048147811387449267920966825261972142790828107169341
29056702380934301615405180463765614159606694623456608176150512636139494053590042377916723730150094152355453195307509996846546024957135630594
47014732053341694630045471346736637133446649052452774896655987814288227151439510822507534778297905539804721116274335258818688815785242799935
76071434434275996245450651810502251293053343675909383072806500450427721205029553200424258508447999692160174311581845255665234840742378430529
123086166487617690875496123157238888426499992728362157969462488264715948356469064022931793286745905231964895427856180514483923656527621230464
199157600921893687120946774967741139719553336404271541042268988715143669561498617223356051795193904924125069739438025770149158497269999660993
322243767409511377996442898124980028146053329132633699011731476979859617917967681246287845081939810156089965167294206284633082153797620891457
521401368331405065117389673092721167865606665536905240054000465695003287479466298469643896877133715080215034906732232054782240651067620552450
843645135740916443113832571217701196011659994669538939065731942674862905397433979715931741959073525236305000074026438339415322804865241443907
1365046504072321508231222244310422363877266660206444179119732408369866192876900278185575638836207240316520034980758670394197563455932861996357
2208691639813237951345054815528123559888926654875983118185464351044729098274334257901507380795280765552825035054785108733612886260798103440264
3573738143885559459576277059838545923766193315082427297305196759414595291151234536087083019631488005869345070035543779127810449716730965436621
5782429783698797410921331875366669483655119969958410415490661110459324389425568793988590400426768771422170105090328887861423335977529068876885
9356167927584356870497608935205215407421313285040837712795857869873919680576803330075673420058256777291515175125872666989233785694260034313506
15138597711283154281418940810571884891076433254999248128286518980333244070002372124064263820485025548713685280216201554850657121671789103190391
24494765638867511151916549745777100298497746540040085841082376850207163750579175454139937240543282326005200455342074221839890907366049137503897
39633363350150665433335490556348985189574179795039333969368895830540407820581547578204201061028307874718885735558275776690548029037838240694288
64128128989018176585252040302126085488071926335079419810451272680747571571160723032344138301571590200724086190900349998530438936403887378198185
103761492339168842018587530858475070677646106130118753779820168511287979391742270610548339362599898075442971926458625775220986965441725618892473
167889621328187018603839571160601156165718032465198173590271441192035550962902993642892477664171488276167058117358975773751425901845612997090658
271651113667355860622427102019076226843364138595316927370091609703323530354645264253440817026771386351610030043817601548972412867287338615983131
439540734995542879226266673179677383009082171060515100960363050895359081317548257896333294690942874627777088161176577322723838769132951613073789
711191848662898739848693775198753609852446309655832028330454660598682611672193522149774111717714260979387118204994178871696251636420290229056920
1150732583658441619074960448378430992861528480716347129290817711494041692989741780046107406408657135607164206366170756194420090405553241842130709
1861924432321340358923654223577184602713974790372179157621272372092724304661935302195881518126371396586551324571164935066116342041973532071187629
3012657015979781977998614671955615595575503271088526286912090083586765997651677082241988924535028532193715530937335691260536432447526773913318338
4874581448301122336922268895532800198289478061460705444533362455679490302313612384437870442661399928780266855508500626326652774489500305984505967
7887238464280904314920883567488415793864981332549231731445452539266256299965289466679859367196428460973982386445836317587189206937027079897824305
12761819912582026651843152463021215992154459394009937175978814994945746602278901851117729809857828389754249241954336943913841981426527385882330272
20649058376862930966764036030509631786019440726559168907424267534212002902244191317797589177054256850728231628400173261501031188363554465780154577
33410878289444957618607188493530847778173900120569106083403082529157749504523093168915318986912085240482480870354510205414873169790081851662484849
54059936666307888585371224524040479564193340847128274990827350063369752406767284486712908163966342091210712498754683466915904358153636317442639426
87470814955752846203978413017571327342367240967697381074230432592527501911290377655628227150878427331693193369109193672330777527943718169105124275
141530751622060734789349637541611806906560581814825656065057782655897254318057662142341135314844769422903905867863877139246681886097354486547763701
229001566577813580993328050559183134248927822782523037139288215248424756229348039797969362465723196754597099236973070811577459414041072655652887976
370532318199874315782677688100794941155488404597348693204345997904322010547405701940310497780567966177501005104836947950824141300138427142200651677
599533884777687896776005738659978075404416227379871730343634213152746766776753741738279860246291162932098104341810018762401600714179499797853539653
970066202977562212558683426760773016559904631977220423547980211057068777324159443678590358026859129109599109446646966713225742014317926940054191330
1569600087755250109334689165420751091964320859357092153891614424209815544100913185416870218273150292041697213788456985475627342728497426737907730983
2539666290732812321893372592181524108524225491334312577439594635266884321425072629095460576300009421151296323235103952188853084742815353677961922313
4109266378488062431228061757602275200488546350691404731331209059476699865525985814512330794573159713192993537023560937664480427471312780415869653296
6648932669220874753121434349783799309012771842025717308770803694743584186951058443607791370873169134344289860258664889853333512214128134093831575609
10758199047708937184349496107386074509501318192717122040102012754220284052477044258120122165446328847537283397282225827517813939685440914509701228905
17407131716929811937470930457169873818514090034742839348872816448963868239428102701727913536319497981881573257540890717371147451899569048603532804514
28165330764638749121820426564555948328015408227459961388974829203184152291905146959848035701765826829418856654823116544888961391585009963113234033419
45572462481568561059291357021725822146529498262202800737847645652148020531333249661575949238085324811300429912364007262260108843484579011716766837933
73737793246207310181111783586281770474544906489662762126822474855332172823238396621423984939851151640719286567187123807149070235069588974830000871352
119310255727775871240403140608007592621074404751865562864670120507480193354571646282999934177936476452019716479551131069409179078554167986546767709285
193048048973983181421514924194289363095619311241528324991492595362812366177810042904423919117787628092739003046738254876558249313623756961376768580637
312358304701759052661918064802296955716693715993393887856162715870292559532381689187423853295724104544758719526289385945967428392177924947923536289922
505406353675742234083432988996586318812313027234922212847655311233104925710191732091847772413511732637497722573027640822525677705801681909300304870559
817764658377501286745351053798883274529006743228316100703818027103397485242573421279271625709235837182256442099317026768493106097979606857223841160481
1323171012053243520828784042795469593341319770463238313551473338336502410952765153371119398122747569819754164672344667591018783803781288766524146031040
2140935670430744807574135096594352867870326513691554414255291365439899896195338574650391023831983407002010606771661694359511889901760895623747987191521
3464106682483988328402919139389822461211646284154792727806764703776402307148103728021510421954730976821764771444006361950530673705542184390272133222561
5605042352914733135977054235984175329081972797846347142062056069216302203343442302671901445786714383823775378215668056310042563607303080014020120414082
9069149035398721464379973375373997790293619082001139869868820772992704510491546030693411867741445360645540149659674418260573237312845264404292253636643
14674191388313454600357027611358173119375591879847487011930876842209006713834988333365313313528159744469315527875342474570615800920148344418312374050725
23743340423712176064737000986732170909669210961848626881799697615201711224326534364058725181269605105114855677535016892831189038232993608822604627687368
38417531812025630665094028598090344029044802841696113893730574457410717938161522697424038494797764849584171205410359367401804839153141953240917001738093
62160872235737806729831029584822514938714013803544740775530272072612429162488057061482763676067369954699026882945376260232993877386135562063521629425461
100578404047763437394925058182912858967758816645240854669260846530023147100649579758906802170865134804283198088355735627634798716539277515304438631163554
162739276283501244124756087767735373906472830448785595444791118602635576263137636820389565846932504758982224971301111887867792593925413077367960260589015
263317680331264681519681145950648232874231647094026450114051965132658723363787216579296368017797639563265423059656847515502591310464690592672398891752569
426056956614765925644437233718383606780704477542812045558843083735294299626924853399685933864730144322247648030957959403370383904390103670040359152341584
689374636946030607164118379669031839654936124636838495672895048867953022990712069978982301882527783885513071090614806918872975214854794262712758044094153
1115431593560796532808555613387415446435640602179650541231738132603247322617636923378668235747257928207760719121572766322243359119244897932753117196435737
1804806230506827139972673993056447286090576726816489036904633181471200345608348993357650537629785712093273790212187573241116334334099692195465875240529890
2920237824067623672781229606443862732526217328996139578136371314074447668225985916736318773377043640301034509333760339563359693453344590128218992436965627
4725044054574450812753903599500310018616794055812628615041004495545648013834334910093969311006829352394308299545947912804476027787444282323684867677495517
7645281878642074485535133205944172751143011384808768193177375809620095682060320826830288084383872992695342808879708252367835721240788872451903860114461144
12370325933216525298289036805444482769759805440621396808218380305165743695894655736924257395390702345089651108425656165172311749028233154775588727791956661
20015607811858599783824170011388655520902816825430165001395756114785839377954976563754545479774575337784993917305364417540147470269022027227492587906417805
32385933745075125082113206816833138290662622266051561809614136419951583073849632300678802875165277682874645025731020582712459219297255182003081315698374466
52401541556933724865937376828221793811565439091481726811009892534737422451804608864433348354939853020659638943036385000252606689566277209230573903604792271
84787475302008849948050583645054932102228061357533288620624028954689005525654241165112151230105130703534283968767405582965065908863532391233655219303166737
137189016858942574813987960473276725913793500449015015431633921489426427977458850029545499585044983724193922911803790583217672598429809600464229122907959008
221976492160951424762038544118331658016021561806548304052257950444115433503113091194657650815150114427728206880571196166182738507293341991697884342211125745
359165509019893999576026504591608383929815062255563319483891871933541861480571941224203150400195098151922129792374986749400411105723151592162113465119084753
581142001180845424338065048709940041945836624062111623536149822377657294983685032418860801215345212579650336672946182915583149613016493583859997807330210498
940307510200739423914091553301548425875651686317674943020041694311199156464256973643063951615540310731572466465321169664983560718739645176022111272449295251
1521449511381584848252156602011488467821488310379786566556191516688856451447942006061924752830885523311222803138267352580566710331756138759882109079779505749
2461757021582324272166248155313036893697139996697461509576233211000055607912198979704988704446425834042795269603588522245550271050495783935904220352228801000
3983206532963909120418404757324525361518628307077248076132424727688912059360140985766913457277311357354018072741855874826116981382251922695786329432008306749
6444963554546233392584652912637562255215768303774709585708657938688967667272339965471902161723737191396813342345444397071667252432747706631690549784237107749
10428170087510142513003057669962087616734396610851957661841082666377879726632480951238815619001048548750831415087300271897784233814999629327476879216245414498
16873133642056375905587710582599649871950164914626667247549740605066847393904820916710717780724785740147644757432744668969451486247747335959167429000482522247
27301303729566518418590768252561737488684561525478624909390823271444727120537301867949533399725834288898476172520044940867235720062746965286644308216727936745
44174437371622894324178478835161387360634726440105292156940563876511574514442122784660251180450620029046120929952789609836687206310494301245811737217210458992
71475741101189412742769247087723124849319287965583917066331387147956301634979424652609784580176454317944597102472834550703922926373241266532456045433938395737
115650178472812307066947725922884512209954014405689209223271951024467876149421547437270035760627074346990718032425624160540610132683735567778267782651148854729
187125919574001719809716973010607637059273302371273126289603338172424177784400972089879820340803528664935315134898458711244533059056976834310723828085087250466
302776098046814026876664698933492149269227316776962335512875289196892053933822519527149856101430603011926033167324082871785143191740712402088991610736236105195
489902017620815746686381671944099786328500619148235461802478627369316231718223491617029676442234131676861348302222541583029676250797689236399715438821323355661
792678115667629773563046370877591935597727935925197797315353916566208285652046011144179532543664734688787381469546624454814819442538401638488707049557559460856
1282580133288445520249428042821691721926228555073433259117832543935524517370269502761209208985898866365648729771769166037844495693336090874888422488378882816517
2075258248956075293812474413699283657523956490998631056433186460501732803022315513905388741529563601054436111241315790492659315135874492513377129537936442277373
3357838382244520814061902456520975379450185046072064315551019004437257320392585016666597950515462467420084841013084956530503810829210583388265552026315325093890
5433096631200596107874376870220259036974141537070695371984205464938990123414900530571986692045026068474520952254400747023163125965085075901642681564251767371263
8790935013445116921936279326741234416424326583142759687535224469376247443807485547238584642560488535894605793267485703553666936794295659289908233590567092465153
14224031644645713029810656196961493453398468120213455059519429934315237567222386077810571334605514604369126745521886450576830062759380735191550915154818859836416
23014966658090829951746935523702727869822794703356214747054654403691485011029871625049155977166003140263732538789372154130496999553676394481459148745385952301569
37238998302736542981557591720664221323221262823569669806574084338006722578252257702859727311771517744632859284311258604707327062313057129673010063900204812137985
60253964960827372933304527244366949193044057526925884553628738741698207589282129327908883288937520884896591823100630758837824061866733524154469212645590764439554
97492963263563915914862118965031170516265320350495554360202823079704930167534387030768610600709038629529451107411889363545151124179790653827479276545795576577539
157746928224391288848166646209398119709309377877421438913831561821403137756816516358677493889646559514426042930512520122382975186046524177981948489191386341017093
255239891487955204763028765174429290225574698227916993274034384901108067924350903389446104490355598143955494037924409485928126310226314831809427765737181917594632
412986819712346493611195411383827409934884076105338432187865946722511205681167419748123598380002157658381536968436929608311101496272839009791376254928568258611725
668226711200301698374224176558256700160458774333255425461900331623619273605518323137569702870357755802337031006361339094239227806499153841600804020665750176206357
1081213530912648191985419587942084110095342850438593857649766278346130479286685742885693301250359913460718567974798268702550329302771992851392180275594318434818082
1749440242112949890359643764500340810255801624771849283111666609969749752892204066023263004120717669263055598981159607796789557109271146692992984296260068611024439
2830653773025598082345063352442424920351144475210443140761432888315880232178889808908956305371077582723774166955957876499339886412043139544385164571854387045842521
4580094015138547972704707116942765730606946099982292423873099498285629985071093874932219309491795251986829765937117484296129443521314286237378148868114455656866960
7410747788164146055049770469385190650958090575192735564634532386601510217249983683841175614862872834710603932893075360795469329933357425781763313439968842702709481
11990841803302694027754477586327956381565036675175027988507631884887140202321077558773394924354668086697433698830192845091598773454671712019141462308083298359576441
19401589591466840082804248055713147032523127250367763553142164271488650419571061242614570539217540921408037631723268205887068103388029137800904775748052141062285922
31392431394769534110558725642041103414088163925542791541649796156375790621892138801387965463572209008105471330553461050978666876842700849820046238056135439421862363
50794020986236374193362973697754250446611291175910555094791960427864441041463200044002536002789749929513508962276729256865734980230729987620951013804187580484148285
82186452381005908303921699339795353860699455101453346636441756584240231663355338845390501466361958937618980292830190307844401857073430837440997251860323019906010648
132980473367242282497284673037549604307310746277363901731233717012104672704818538889393037469151708867132489255106919564710136837304160825061948265664510600390158933
215166925748248190801206372377344958168010201378817248367675473596344904368173877734783538935513667804751469547937109872554538694377591662502945517524833620296169581
348147399115490473298491045414894562475320947656181150098909190608449577072992416624176576404665376671883958803044029437264675531681752487564893783189344220686328514
563314324863738664099697417792239520643331149034998398466584664204794481441166294358960115340179044476635428350981139309819214226059344150067839300714177840982498095
911461723979229137398188463207134083118652096691179548565493854813244058514158710983136691744844421148519387154025168747083889757741096637632733083903522061668826609
1474776048842967801497885880999373603761983245726177947032078519018038539955325005342096807085023465625154815505006308056903103983800440787700572384617699902651324704
2386237772822196938896074344206507686880635342417357495597572373831282598469483716325233498829867886773674202659031476803986993741541537425333305468521221964320151313
3861013821665164740393960225205881290642618588143535442629650892849321138424808721667330305914891352398829018164037784860890097725341978213033877853138921866971476017
6247251594487361679290034569412388977523253930560892938227223266680603736894292437992563804744759239172503220823069261664877091466883515638367183321660143831291627330
10108265416152526419683994794618270268165872518704428380856874159529924875319101159659894110659650591571332238987107046525767189192225493851401061174799065698263103347
16355517010639888098974029364030659245689126449265321319084097426210528612213393597652457915404409830743835459810176308190644280659109009489768244496459209529554730677
26463782426792414518658024158648929513854998967969749699940971585740453487532494757312352026064060422315167698797283354716411469851334503341169305671258275227817834024
42819299437432302617632053522679588759544125417235071019025069011950982099745888354964809941468470253059003158607459662907055750510443512830937550167717484757372564701
69283081864224717136290077681328518273399124385204820718966040597691435587278383112277161967532530675374170857404743017623467220361778016172106855838975759985190398725
112102381301657019753922131204008107032943249802439891737991109609642417687024271467241971909001000928433174016012202680530522970872221529003044406006693244742562963426
181385463165881736890212208885336625306342374187644712456957150207333853274302654579519133876533531603807344873416945698153990191233999545175151261845669004727753362151
293487844467538756644134340089344732339285623990084604194948259816976270961326926046761105785534532532240518889429148378684513162106221074178195667852362249470316325577
474873307633420493534346548974681357645627998177729316651905410024310124235629580626280239662068064136047863762846094076838503353340220619353346929698031254198069687728
768361152100959250178480889064026089984913622167813920846853669841286395196956506673041345447602596668288382652275242455523016515446441693531542597550393503668386013305
1243234459734379743712827438038707447630541620345543237498759079865596519432586087299321585109670660804336246415121336532361519868786662312884889527248424757866455701033
2011595611835338993891308327102733537615455242513357158345612749706882914629542593972362930557273257472624629067396578987884536384233104006416432124798818261534841714338
3254830071569718737604135765141440985245996862858900395844371829572479434062128681271684515666943918276960875482517915520246056253019766319301321652047243019401297415371
5266425683405057731495444092244174522861452105372257554189984579279362348691671275244047446224217175749585504549914494508130592637252870325717753776846061280936139129709
8521255754974776469099579857385615508107448968231157950034356408851841782753799956515731961891161094026546380032432410028376648890272636645019075428893304300337436545080
13787681438379834200595023949629790030968901073603415504224340988131204131445471231759779408115378269776131884582346904536507241527525506970736829205739365581273575674789
22308937193354610669694603807015405539076350041834573454258697396983045914199271188275511370006539363802678264614779314564883890417798143615755904634632669881611012219869
36096618631734444870289627756645195570045251115437988958483038385114250045644742420035290778121917633578810149197126219101391131945323650586492733840372035462884587894658
58405555825089055539984231563660601109121601157272562412741735782097295959844013608310802148128456997381488413811905533666275022363121794202248638475004705344495600114527
94502174456823500410273859320305796679166852272710551371224774167211546005488756028346092926250374630960298563009031752767666154308445444788741372315376740807380188009185
152907730281912555950258090883966397788288453429983113783966509949308841965332769636656895074378831628341786976820937286433941176671567238990990010790381446151875788123712
247409904738736056360531950204272194467455305702693665155191284116520387970821525665002988000629206259302085539829969039201607330980012683779731383105758186959255976132897
400317635020648612310790041088238592255743759132676778939157794065829229936154295301659883075008037887643872516650906325635548507651579922770721393896139633111131764256609
647727539759384668671321991292510786723199064835370444094349078182349617906975820966662871075637244146945958056480875364837155838631592606550452777001897820070387740389506
1048045174780033280982112032380749378978942823968047223033506872248178847843130116268322754150645282034589830573131781690472704346283172529321174170898037453181519504646115
1695772714539417949653434023673260165702141888803417667127855950430528465750105937234985625226282526181535788629612657055309860184914765135871626947899935273251907245035621
2743817889319451230635546056054009544681084712771464890161362822678707313593236053503308379376927808216125619202744438745782564531197937665192801118797972726433426749681736
4439590603858869180288980079727269710383226601574882557289218773109235779343341990738294004603210334397661407832357095801092424716112702801064428066697907999685333994717357
7183408493178320410924526135781279255064311314346347447450581595787943092936578044241602383980138142613787027035101534546874989247310640466257229185495880726118760744399093
11622999097037189591213506215508548965447537915921230004739800368897178872279920034979896388583348477011448434867458630347967413963423343267321657252193788725804094739116450
18806407590215510002138032351289828220511849230267577452190381964685121965216498079221498772563486619625235461902560164894842403210733983733578886437689669451922855483515543
30429406687252699593351538566798377185959387146188807456930182333582300837496418114201395161146835096636683896770018795242809817174157327000900543689883458177726950222631993
49235814277468209595489570918088205406471236376456384909120564298267422802712916193422893933710321716261919358672578960137652220384891310734479430127573127629649805706147536
79665220964720909188841109484886582592430623522645192366050746631849723640209334307624289094857156812898603255442597755380462037559048637735379973817456585807376755928779529
128901035242189118784330680402974787998901859899101577275171310930117146442922250501047183028567478529160522614115176715518114257943939948469859403945029713437026561634927065
208566256206910027973171789887861370591332483421746769641222057561966870083131584808671472123424635342059125869557774470898576295502988586205239377762486299244403317563706594
337467291449099146757502470290836158590234343320848346916393368492084016526053835309718655151992113871219648483672951186416690553446928534675098781707516012681429879198633659
546033547656009174730674260178697529181566826742595116557615426054050886609185420118390127275416749213278774353230725657315266848949917120880338159470002311925833196762340253
883500839105108321488176730469533687771801170063443463474008794546134903135239255428108782427408863084498422836903676843731957402396845655555436941177518324607263075960973912
1429534386761117496218850990648231216953367996806038580031624220600185789744424675546498909702825612297777197190134402501047224251346762776435775100647520636533096272723314165
2313035225866225817707027721117764904725169166869482043505633015146320692879663930974607692130234475382275620027038079344779181653743608431991212041825038961140359348684288077
3742569612627343313925878711765996121678537163675520623537257235746506482624088606521106601833060087680052817217172481845826405905090371208426987142472559597673455621407602242
6055604838493569131632906432883761026403706330545002667042890250892827175503752537495714293963294563062328437244210561190605587558833979640418199184297598558813814970091890319
9798174451120912445558785144649757148082243494220523290580147486639333658127841144016820895796354650742381254461383043036431993463924350848845186326770158156487270591499492561
15853779289614481577191691577533518174485949824765525957623037737532160833631593681512535189759649213804709691705593604227037581022758330489263385511067756715301085561591382880
25651953740735394022750476722183275322568193318986049248203185224171494491759434825529356085556003864547090946166976647263469574486682681338108571837837914871788356153090875441
41505733030349875599942168299716793497054143143751575205826222961703655325391028507041891275315653078351800637872570251490507155509441011827371957348905671587089441714682258321",0.1229170011356473,o3-mini
111,Reverse a string taken from user input without using slicing.,Easy,"s = input(""Enter a string: "")
reversed_str = """"
for char in s:
    reversed_str = char + reversed_str
print(reversed_str)",5,0.0,1,hello,olleh,dlrow olleh,0.0881670275703072,o3-mini
112,Count the number of vowels in a given string.,Easy,"s = input(""Enter a string: "")
vowels = ""aeiouAEIOU""
count = 0
for char in s:
    if char in vowels:
        count += 1
print(count)",6,0.0,1,hello,2,3,0.0733749766368419,o3-mini
113,Check whether a given string is a palindrome.,Easy,"s = input(""Enter a string: "")
if s == s[::-1]:
    print(""Palindrome"")
else:
    print(""Not a palindrome"")",4,0.0,0,radar,Palindrome,Not a palindrome,0.0967920059338212,o3-mini
114,Write a program to find the length of a list without using `len()`.,Easy,"lst = [int(x) for x in input(""Enter numbers separated by spaces: "").split()]
count = 0
for _ in lst:
    count += 1
print(count)",4,0.0,1,1 2 3 4,4,5,0.1249169872608035,o3-mini
115,Find the largest and smallest numbers in a list of integers.,Easy,"nums = [int(x) for x in input(""Enter numbers separated by spaces: "").split()]
print(""Largest:"", max(nums))
print(""Smallest:"", min(nums))",3,0.0,0,3 7 2 9,"Largest: 9
Smallest: 2","Largest: 5
Smallest: 1",0.0811670033726841,o3-mini
116,Remove all duplicate elements from a list and print the result.,Easy,"lst = [int(x) for x in input(""Enter numbers separated by spaces: "").split()]
unique = list(dict.fromkeys(lst))
print(unique)",3,0.0,0,1 2 2 3 3 3,"[1, 2, 3]","[1, 2, 3, 4, 5]",0.1249589840881526,o3-mini
117,Sort a list of integers in ascending order using the built-in sort() method.,Easy,"lst = [int(x) for x in input(""Enter numbers separated by spaces: "").split()]
lst.sort()
print(lst)",3,0.0,0,3 1 4 2,"[1, 2, 3, 4]","[1, 2, 3, 4, 5]",0.1147079747170209,o3-mini
118,Calculate the sum of all numbers in a list using a loop.,Easy,"nums = [int(x) for x in input(""Enter numbers separated by spaces: "").split()]
total = 0
for num in nums:
    total += num
print(total)",4,0.0,1,1 2 3 4,10,15,0.2332919975742697,o3-mini
119,Write a function that returns the second largest number in a list.,Easy,"def second_largest(lst):
    unique = list(set(lst))
    unique.sort()
    return unique[-2] if len(unique) >= 2 else None

lst = [int(x) for x in input(""Enter numbers separated by spaces: "").split()]
print(second_largest(lst))",7,1.0,0,4 1 3 2,3,5,0.0882500025909394,o3-mini
120,Convert a temperature from Celsius to Fahrenheit.,Easy,"c = float(input(""Enter temperature in Celsius: ""))
f = (c * 9/5) + 32
print(f)",3,0.0,0,0,32.0,32.0,0.0507919758092612,o3-mini
121,Count the number of words in a sentence input by the user.,Easy,"sentence = input(""Enter a sentence: "")
words = sentence.split()
print(len(words))",3,0.0,0,Hello world,2,7,0.0504589988850057,o3-mini
122,Write a program that prints the ASCII value of a given character.,Easy,"char = input(""Enter a character: "")[0]
print(ord(char))",2,0.0,0,A,65,99,0.0712079927325248,o3-mini
123,Print each character of a string on a new line using a loop.,Easy,"s = input(""Enter a string: "")
for char in s:
    print(char)",3,0.0,1,Hi,"H
i","d
a
t
a
 
s
c
i
e
n
c
e",0.055042008170858,o3-mini
124,Merge two user-defined lists and print the merged result.,Easy,"lst1 = [int(x) for x in input(""Enter first list of numbers separated by spaces: "").split()]
lst2 = [int(x) for x in input(""Enter second list of numbers separated by spaces: "").split()]
merged = lst1 + lst2
print(merged)",4,0.0,0,1 2 | 3 4,"[1, 2, 3, 4]","[1, 2, 3, 4, 5, 5, 4, 3, 2, 1]",0.1232920039910823,o3-mini
125,Square every element of a list using list comprehension.,Easy,"lst = [int(x) for x in input(""Enter numbers separated by spaces: "").split()]
squared = [x**2 for x in lst]
print(squared)",3,0.0,1,1 2 3,"[1, 4, 9]","[1, 9, 25, 49, 81]",0.0917089928407222,o3-mini
126,Filter out all even numbers from a list using list comprehension.,Easy,"lst = [int(x) for x in input(""Enter numbers separated by spaces: "").split()]
filtered = [x for x in lst if x % 2 != 0]
print(filtered)",3,0.0,1,1 2 3 4 5,"[1, 3, 5]",[],0.2665409992914647,o3-mini
127,Write a function that returns the sum of digits of an integer.,Easy,"def sum_of_digits(n):
    total = 0
    for digit in str(abs(n)):
        total += int(digit)
    return total

num = int(input(""Enter an integer: ""))
print(sum_of_digits(num))",8,1.0,1,123,6,9,0.0867920171003788,o3-mini
128,Find the maximum of three numbers using a user-defined function.,Easy,"def max_of_three(a, b, c):
    return max(a, b, c)

a = float(input(""Enter first number: ""))
b = float(input(""Enter second number: ""))
c = float(input(""Enter third number: ""))
print(max_of_three(a, b, c))",7,3.0,0,3 | 7 | 5,7.0,29.0,0.1124169793911278,o3-mini
129,Create a list of numbers from 1 to 20 using `range()` and print it.,Easy,"print(list(range(1, 21)))",1,0.0,0,,"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]","[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",0.1013750152196735,o3-mini
130,Convert a string to uppercase without using the `upper()` function.,Easy,"s = input(""Enter a string: "")
result = """"
for char in s:
    if ""a"" <= char <= ""z"":
        result += chr(ord(char) - 32)
    else:
        result += char
print(result)",6,0.0,1,hello,HELLO,HELLO,0.1149999734479934,o3-mini
131,Count how many times a specific character appears in a string.,Easy,"s = input(""Enter a string: "")
char = input(""Enter the character to count: "")
count = 0
for c in s:
    if c == char:
        count += 1
print(count)",5,0.0,1,hello | l,2,0,0.1121660170610994,o3-mini
132,Replace all spaces in a string with underscores.,Easy,"s = input(""Enter a string: "")
print(s.replace("" "", ""_""))",2,0.0,0,hello world,hello_world,hello,0.0407909974455833,o3-mini
133,"Write a function to check if a number is positive, negative, or zero.",Easy,"def check_number(n):
    if n > 0:
        return ""Positive""
    elif n < 0:
        return ""Negative""
    else:
        return ""Zero""

num = float(input(""Enter a number: ""))
print(check_number(num))",10,1.0,0,5,Positive,Positive,0.1232089998666197,o3-mini
134,Create a dictionary with 3 key-value pairs and print it.,Easy,"d = {""a"": 1, ""b"": 2, ""c"": 3}
print(d)",2,0.0,0,,"{'a': 1, 'b': 2, 'c': 3}","{'a': 1, 'b': 2, 'c': 3}",0.1591249892953783,o3-mini
135,Access a specific value from a dictionary using a key.,Easy,"d = {""a"": 1, ""b"": 2, ""c"": 3}
key = input(""Enter key: "")
print(d.get(key, ""Key not found""))",3,0.0,0,b,2,Key not found,0.0574589939787983,o3-mini
136,Add a new key-value pair to an existing dictionary.,Easy,"d = {""a"": 1, ""b"": 2, ""c"": 3}
key = input(""Enter key: "")
value = input(""Enter value: "")
d[key] = value
print(d)",4,0.0,0,d | 4,"{'a': 1, 'b': 2, 'c': 3, 'd': '4'}","{'a': 1, 'b': 2, 'c': 3, 'hello': '8'}",0.0849159841891378,o3-mini
137,Delete a key-value pair from a dictionary.,Easy,"d = {""a"": 1, ""b"": 2, ""c"": 3}
key = input(""Enter key to delete: "")
if key in d:
    del d[key]
print(d)",4,0.0,0,b,"{'a': 1, 'c': 3}","{'a': 1, 'b': 2, 'c': 3}",0.0843330053612589,o3-mini
138,Create a tuple with 5 elements and print the second element.,Easy,"t = (1, 2, 3, 4, 5)
print(t[1])",2,0.0,0,,2,2,0.1686660107225179,o3-mini
139,Convert a list to a tuple and print the result.,Easy,"lst = [int(x) for x in input(""Enter numbers separated by spaces: "").split()]
print(tuple(lst))",2,0.0,1,1 2 3,"(1, 2, 3)","(1, 2, 3, 4, 5)",0.0516249856445938,o3-mini
140,Check if an element exists in a list.,Easy,"lst = [int(x) for x in input(""Enter numbers separated by spaces: "").split()]
element = int(input(""Enter element to search: ""))
print(element in lst)",3,0.0,0,1 2 3 | 2,True,Error: invalid literal for int() with base 10: 'hello',0.0635830219835043,o3-mini
141,Check if a key exists in a dictionary.,Easy,"d = {""a"": 1, ""b"": 2, ""c"": 3}
key = input(""Enter key to search: "")
print(key in d)",3,0.0,0,a,True,False,0.1215839874930679,o3-mini
142,Write a program to calculate the area of a rectangle given length and width.,Easy,"length = float(input(""Enter length: ""))
width = float(input(""Enter width: ""))
area = length * width
print(area)",3,0.0,0,5 | 3,15.0,8.0,0.0626660184934735,o3-mini
143,Create a set with 5 elements and print it.,Easy,"s = {1, 2, 3, 4, 5}
print(s)",2,0.0,0,,"{1, 2, 3, 4, 5} (order may vary)","{1, 2, 3, 4, 5}",0.1734999823383987,o3-mini
144,Add an element to a set and remove another.,Easy,"s = {1, 2, 3, 4, 5}
s.add(6)
s.remove(3)
print(s)",3,0.0,0,,"{1, 2, 4, 5, 6} (order may vary)","{1, 2, 4, 5, 6}",0.0732499756850302,o3-mini
145,Find the union and intersection of two sets.,Easy,"set1 = {1, 2, 3}
set2 = {2, 3, 4}
union = set1 | set2
intersection = set1 & set2
print(""Union:"", union)
print(""Intersection:"", intersection)",4,0.0,0,,"Union: {1, 2, 3, 4}
Intersection: {2, 3}","Union: {1, 2, 3, 4}
Intersection: {2, 3}",0.1099579967558384,o3-mini
146,Find the number of digits in an integer.,Easy,"num = int(input(""Enter an integer: ""))
print(len(str(abs(num))))",2,0.0,0,12345,5,2,0.0530410034116357,o3-mini
147,Check whether a given year is a leap year.,Easy,"year = int(input(""Enter a year: ""))
if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
    print(""Leap year"")
else:
    print(""Not a leap year"")",5,0.0,0,2020,Leap year,Leap year,0.0661670055706054,o3-mini
148,Create a list of the first 10 even numbers using a loop.,Easy,"even_numbers = []
for i in range(1, 21):
    if i % 2 == 0:
        even_numbers.append(i)
print(even_numbers)",4,0.0,1,,"[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]","[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",0.2051669871434569,o3-mini
149,Write a function that accepts a string and returns it reversed using recursion.,Easy,"def reverse_string(s):
    if s == """": 
        return s
    else:
        return reverse_string(s[1:]) + s[0]

input_str = input(""Enter a string: "")
print(reverse_string(input_str))",8,1.0,0,hello,olleh,ereht olleh,0.074625015258789,o3-mini
150,Write a function that finds the GCD of two numbers using the Euclidean algorithm.,Medium,"def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(gcd(48, 18))",4,2.0,1,48 18,6,6,0.3293329791631549,o3-mini
151,Implement a function to check whether a string is a pangram.,Medium,"def is_pangram(s):\n    s = s.lower()\n    return set('abcdefghijklmnopqrstuvwxyz').issubset(set(s))\n\nprint(is_pangram(""The quick brown fox jumps over the lazy dog""))",4,1.0,0,The quick brown fox jumps over the lazy dog,True,True,0.0642499944660812,o3-mini
152,Write a function that returns the most frequent element in a list.,Medium,"def most_frequent(lst):\n    return max(set(lst), key=lst.count)\n\nprint(most_frequent([1,2,2,3,3,3,4]))",3,1.0,0,"[1,2,2,3,3,3,4]",3,3,0.0407079933211207,o3-mini
153,Implement a binary search algorithm on a sorted list.,Medium,"def binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\nprint(binary_search([1,2,3,4,5,6,7], 5))",9,2.0,1,"[1,2,3,4,5,6,7] 5",4,4,0.0513330160174518,o3-mini
154,Write a function to calculate the power of a number without using the power operator.,Medium,"def power(x, n):\n    result = 1\n    for _ in range(n):\n        result *= x\n    return result\n\nprint(power(2, 10))",5,2.0,1,2 10,1024,1024,0.0374169903807342,o3-mini
155,"Given a list of integers, return the longest increasing subsequence.",Medium,"def longest_increasing_subsequence(arr):\n    if not arr:\n        return []\n    dp = [1]*len(arr)\n    prev = [-1]*len(arr)\n    for i in range(len(arr)):\n        for j in range(i):\n            if arr[j] < arr[i] and dp[j]+1 > dp[i]:\n                dp[i] = dp[j] + 1\n                prev[i] = j\n    max_index = dp.index(max(dp))\n    lis = []\n    while max_index != -1:\n        lis.append(arr[max_index])\n        max_index = prev[max_index]\n    return lis[::-1]\n\nprint(longest_increasing_subsequence([10,9,2,5,3,7,101,18]))",13,1.0,2,"[10,9,2,5,3,7,101,18]","[2, 5, 7, 101]","[2, 5, 7, 101]",0.059792015235871,o3-mini
156,Check if two strings are anagrams of each other.,Medium,"def are_anagrams(s1, s2):\n    return sorted(s1) == sorted(s2)\n\nprint(are_anagrams(""listen"", ""silent""))",3,2.0,0,listen silent,True,True,0.044915999751538,o3-mini
157,"Implement a stack using a Python list with push, pop, and peek operations.",Medium,"class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop() if self.items else None\n    def peek(self):\n        return self.items[-1] if self.items else None\n\ns = Stack()\ns.push(1)\ns.push(2)\ns.push(3)\nprint(s.pop(), s.peek())",10,0.0,0,(Predefined),3 2,3 2,0.0397909898310899,o3-mini
158,Create a function that generates all prime numbers up to a given number.,Medium,"def primes_up_to(n):\n    sieve = [True]*(n+1)\n    sieve[0:2] = [False, False]\n    for i in range(2, int(n**0.5)+1):\n        if sieve[i]:\n            for j in range(i*i, n+1, i):\n                sieve[j] = False\n    return [i for i, prime in enumerate(sieve) if prime]\n\nprint(primes_up_to(30))",8,1.0,2,30,"[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]","[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",0.0418749987147748,o3-mini
159,Write a function that flattens a nested list.,Medium,"def flatten(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten(item))\n        else:\n            result.append(item)\n    return result\n\nprint(flatten([1, [2, [3, 4], 5], 6]))",7,1.0,1,"[1, [2, [3, 4], 5], 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",0.0359580153599381,o3-mini
160,Check if a string has balanced parentheses.,Medium,"def balanced_parentheses(s):\n    stack = []\n    mapping = {)"": ""(""}\n    for char in s:\n        if char == """"("""":\n            stack.append(char)\n        elif char == """")"""":\n            if not stack or stack.pop() != mapping[char]:\n                return False\n    return not stack\n\nprint(balanced_parentheses(""""(a*(b+c))""""))""",9,1.0,1,(a*(b+c)),True,True,0.0416249968111515,o3-mini
161,Write a function to calculate the nth Fibonacci number using recursion with memoization.,Medium,"def fib(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n <= 1:\n        return n\n    memo[n] = fib(n-1, memo) + fib(n-2, memo)\n    return memo[n]\n\nprint(fib(10))",7,2.0,0,10,55,55,0.0417499977629631,o3-mini
162,Implement the Caesar cipher for encryption and decryption.,Medium,"def caesar_cipher(text, shift):\n    result = ""\n    for char in text:\n        if char.isalpha():\n            offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - offset + shift) % 26 + offset)\n        else:\n            result += char\n    return result\n\nencrypted = caesar_cipher(""Hello, World!"", 3)\ndecrypted = caesar_cipher(encrypted, -3)\nprint(encrypted)\nprint(decrypted)",10,2.0,1,"Hello, World! 3","Khoor, Zruog!\nHello, World!","Khoor, Zruog!\nHello, World!",0.0336669909302145,o3-mini
163,Write a function that removes all duplicates from a string while preserving the order.,Medium,"def remove_duplicates(s):\n    seen = set()\n    result = ""\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n            result += char\n    return result\n\nprint(remove_duplicates(""banana""))",6,1.0,1,banana,ban,ban,0.0221660011447966,o3-mini
164,Find the first non-repeating character in a string.,Medium,"def first_non_repeating(s):\n    freq = {}\n    for char in s:\n        freq[char] = freq.get(char, 0) + 1\n    for char in s:\n        if freq[char] == 1:\n            return char\n    return None\n\nprint(first_non_repeating(""swiss""))",7,1.0,2,swiss,w,w,0.0480829912703484,o3-mini
165,Calculate the sum of all even numbers in a matrix.,Medium,"def sum_even(matrix):\n    total = 0\n    for row in matrix:\n        for num in row:\n            if num % 2 == 0:\n                total += num\n    return total\n\nprint(sum_even([[1,2,3],[4,5,6],[7,8,9]]))",7,1.0,2,"[[1,2,3],[4,5,6],[7,8,9]]",20,20,0.0437080161646008,o3-mini
166,"Given a 2D matrix, transpose it.",Medium,"def transpose(matrix):\n    return [list(row) for row in zip(*matrix)]\n\nprint(transpose([[1,2,3],[4,5,6]]))",3,1.0,1,"[[1,2,3],[4,5,6]]","[[1,4],[2,5],[3,6]]","[[1,4],[2,5],[3,6]]",0.0292079930659383,o3-mini
167,Implement a queue using two stacks.,Medium,"class Queue:\n    def __init__(self):\n        self.in_stack = []\n        self.out_stack = []\n    def enqueue(self, item):\n        self.in_stack.append(item)\n    def dequeue(self):\n        if not self.out_stack:\n            while self.in_stack:\n                self.out_stack.append(self.in_stack.pop())\n        return self.out_stack.pop() if self.out_stack else None\n\nq = Queue()\nq.enqueue(1)\nq.enqueue(2)\nq.enqueue(3)\nprint(q.dequeue(), q.dequeue())",10,0.0,1,(Predefined),1 2,1 2,0.0418330018874257,o3-mini
168,Write a function that rotates a list by k elements to the right.,Medium,"def rotate_list(lst, k):\n    k = k % len(lst)\n    return lst[-k:] + lst[:-k]\n\nprint(rotate_list([1,2,3,4,5], 2))",3,2.0,0,"[1,2,3,4,5] 2","[4,5,1,2,3]","[4,5,1,2,3]",0.0317079829983413,o3-mini
169,Determine if a number is an Armstrong number.,Medium,def is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    return sum(d**len(digits) for d in digits) == n\n\nprint(is_armstrong(153)),4,1.0,1,153,True,True,0.0298330269288271,o3-mini
170,Write a function that returns all subsets of a set.,Medium,"def subsets(s):\n    result = []\n    s = list(s)\n    n = len(s)\n    for i in range(2**n):\n        subset = [s[j] for j in range(n) if (i >> j) & 1]\n        result.append(subset)\n    return result\n\nprint(subsets({1,2,3}))",6,1.0,2,"{1,2,3}","[[], [1], [2], [1,2], [3], [1,3], [2,3], [1,2,3]]","[[], [1], [2], [1,2], [3], [1,3], [2,3], [1,2,3]]",0.8767080144025385,o3-mini
171,Find the intersection of two lists.,Medium,"def intersection(lst1, lst2):\n    return list(set(lst1) & set(lst2))\n\nprint(intersection([1,2,3,4], [3,4,5,6]))",3,2.0,0,"[1,2,3,4] [3,4,5,6]","[3, 4]","[3, 4]",0.0282500113826245,o3-mini
172,Generate Pascal’s Triangle up to n rows.,Medium,"def pascals_triangle(n):\n    triangle = []\n    for i in range(n):\n        row = [1]*(i+1)\n        for j in range(1, i):\n            row[j] = triangle[i-1][j-1] + triangle[i-1][j]\n        triangle.append(row)\n    return triangle\n\nprint(pascals_triangle(5))",8,1.0,2,5,"[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]","[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]",0.0219170178752392,o3-mini
173,Implement a simple contact book using a dictionary with names and phone numbers.,Medium,"contacts = {""Alice"": ""123"", ""Bob"": ""456""}\ncontacts[""Charlie""] = ""789""\nprint(contacts.get(""Alice""))\nprint(contacts.get(""Charlie""))",4,0.0,0,(Predefined),123\n789,123\n789,0.0296250218525528,o3-mini
174,Write a function that finds the longest word in a given sentence.,Medium,"def longest_word(sentence):\n    words = sentence.split()\n    return max(words, key=len)\n\nprint(longest_word(""The quick brown fox jumps over the lazy dog""))",3,1.0,0,The quick brown fox jumps over the lazy dog,quick,quick,0.020999985281378,o3-mini
175,Write a function to check if a number is a palindrome without converting it to a string.,Medium,def is_palindrome(n):\n    if n < 0:\n        return False\n    original = n\n    rev = 0\n    while n:\n        rev = rev * 10 + n % 10\n        n //= 10\n    return original == rev\n\nprint(is_palindrome(121)),7,1.0,1,121,True,True,0.0181250215973705,o3-mini
176,Implement the merge sort algorithm.,Medium,"def merge_sort(lst):\n    if len(lst) <= 1:\n        return lst\n    mid = len(lst)//2\n    left = merge_sort(lst[:mid])\n    right = merge_sort(lst[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n\nprint(merge_sort([5,2,9,1,5,6]))",15,1.0,1,"[5,2,9,1,5,6]","[1, 2, 5, 5, 6, 9]","[1, 2, 5, 5, 6, 9]",0.0312089978251606,o3-mini
177,Write a function that calculates the nth triangular number.,Medium,def triangular(n):\n    return n*(n+1)//2\n\nprint(triangular(10)),3,1.0,0,10,55,55,0.0145829981192946,o3-mini
178,Find the longest common prefix in a list of strings.,Medium,"def longest_common_prefix(strs):\n    if not strs:\n        return ""\n    prefix = strs[0]\n    for s in strs[1:]:\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return ""\n    return prefix\n\nprint(longest_common_prefix([""flower"",""flow"",""flight""]))",8,1.0,2,"[""flower"",""flow"",""flight""]",fl,fl,0.0147079990711063,o3-mini
179,Check if a given Sudoku board is valid.,Medium,,21,1.0,3,(Predefined 9x9 board),True,True,0.0452079984825104,o3-mini
180,"Implement a simple calculator that evaluates expressions with +, -, *, and /.",Medium,"def simple_calculator(expr):\n    try:\n        return eval(expr)\n    except Exception as e:\n        return str(e)\n\nprint(simple_calculator(""2+3*4-5/2""))",5,1.0,0,2+3*4-5/2,11.5,11.5,0.0302499975077807,o3-mini
181,"Given a list of numbers, find all unique pairs that sum to a specific target.",Medium,"def find_pairs(lst, target):\n    seen = set()\n    pairs = set()\n    for num in lst:\n        complement = target - num\n        if complement in seen:\n            pairs.add(tuple(sorted((num, complement))))\n        seen.add(num)\n    return list(pairs)\n\nprint(find_pairs([1,2,3,4,3,2,1], 5))",7,2.0,1,"[1,2,3,4,3,2,1] 5","[(1, 4), (2, 3)]","[(1, 4), (2, 3)]",0.0214580213651061,o3-mini
182,Write a function to compute the digital root of a number.,Medium,def digital_root(n):\n    while n > 9:\n        n = sum(int(d) for d in str(n))\n    return n\n\nprint(digital_root(493193)),4,1.0,1,493193,2,2,0.0147499958984553,o3-mini
183,Implement a basic LRU (Least Recently Used) cache.,Medium,"from collections import OrderedDict\n\nclass LRUCache:\n    def __init__(self, capacity):\n        self.cache = OrderedDict()\n        self.capacity = capacity\n    def get(self, key):\n        if key not in self.cache:\n            return -1\n        self.cache.move_to_end(key)\n        return self.cache[key]\n    def put(self, key, value):\n        if key in self.cache:\n            self.cache.move_to_end(key)\n        self.cache[key] = value\n        if len(self.cache) > self.capacity:\n            self.cache.popitem(last=False)\n\ncache = LRUCache(2)\ncache.put(1, 1)\ncache.put(2, 2)\nprint(cache.get(1))\ncache.put(3, 3)\nprint(cache.get(2))\ncache.put(4, 4)\nprint(cache.get(1))\nprint(cache.get(3))\nprint(cache.get(4))",16,0.0,0,(Predefined),1\n-1\n-1\n3\n4,1\n-1\n-1\n3\n4,0.0315840006805956,o3-mini
184,Determine the majority element in a list (appears more than n/2 times).,Medium,"def majority_element(lst):\n    count = 0\n    candidate = None\n    for num in lst:\n        if count == 0:\n            candidate = num\n        count += (1 if num == candidate else -1)\n    return candidate\n\nprint(majority_element([2,2,1,1,2,2,3]))",7,1.0,1,"[2,2,1,1,2,2,3]",2,2,0.0187080004252493,o3-mini
185,Write a function that checks if a number is a perfect square.,Medium,def is_perfect_square(n):\n    if n < 0:\n        return False\n    x = int(n**0.5)\n    return x*x == n\n\nprint(is_perfect_square(16)),5,1.0,0,16,True,True,0.0153340224642306,o3-mini
186,Implement a function to convert Roman numerals to integers.,Medium,"def roman_to_int(s):\n    roman = {""I"": 1, ""V"": 5, ""X"": 10, ""L"": 50, ""C"": 100, ""D"": 500, ""M"": 1000}\n    total = 0\n    prev = 0\n    for char in s[::-1]:\n        curr = roman[char]\n        if curr < prev:\n            total -= curr\n        else:\n            total += curr\n        prev = curr\n    return total\n\nprint(roman_to_int(""MCMXCIV""))",9,1.0,1,MCMXCIV,1994,1994,0.0602910004090517,o3-mini
187,Create a function to serialize and deserialize a dictionary.,Medium,"import json\ndef serialize_dict(d):\n    return json.dumps(d)\ndef deserialize_dict(s):\n    return json.loads(s)\nd = {""a"": 1, ""b"": 2}\ns = serialize_dict(d)\nprint(s)\nprint(deserialize_dict(s))",7,2.0,0,"{""a"":1, ""b"":2}","JSON string and then {'a': 1, 'b': 2}","JSON string and then {'a': 1, 'b': 2}",0.0382080033887177,o3-mini
188,Write a function to generate the first n rows of the Floyd’s triangle.,Medium,"def floyd_triangle(n):\n    num = 1\n    triangle = []\n    for i in range(1, n+1):\n        row = []\n        for j in range(i):\n            row.append(num)\n            num += 1\n        triangle.append(row)\n    return triangle\n\nprint(floyd_triangle(4))",9,1.0,2,4,"[[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]","[[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]",0.0295419886242598,o3-mini
189,Check if a list is a rotated version of another list.,Medium,"def is_rotated(lst1, lst2):\n    if len(lst1) != len(lst2):\n        return False\n    return ' '.join(map(str, lst2)) in ' '.join(map(str, lst1*2))\n\nprint(is_rotated([1,2,3,4], [3,4,1,2]))",4,2.0,0,"[1,2,3,4] [3,4,1,2]",True,True,0.0240420049522072,o3-mini
190,Create a function that returns the number of trailing zeros in a factorial.,Medium,def trailing_zeros(n):\n    count = 0\n    while n:\n        n //= 5\n        count += n\n    return count\n\nprint(trailing_zeros(100)),5,1.0,1,100,24,24,0.0173329899553209,o3-mini
191,Write a function that finds the longest palindromic substring.,Medium,"def longest_palindromic_substring(s):\n    res = ""\n    for i in range(len(s)):\n        l, r = i, i\n        while l >= 0 and r < len(s) and s[l] == s[r]:\n            if r - l + 1 > len(res):\n                res = s[l:r+1]\n            l -= 1; r += 1\n        l, r = i, i+1\n        while l >= 0 and r < len(s) and s[l] == s[r]:\n            if r - l + 1 > len(res):\n                res = s[l:r+1]\n            l -= 1; r += 1\n    return res\n\nprint(longest_palindromic_substring(""babad""))",14,1.0,3,babad,bab (or aba),bab,0.0187499972525984,o3-mini
192,Create a class that implements a simple counter with increment and reset methods.,Medium,class Counter:\n    def __init__(self):\n        self.count = 0\n    def increment(self):\n        self.count += 1\n    def reset(self):\n        self.count = 0\n\nc = Counter()\nc.increment()\nc.increment()\nprint(c.count)\nc.reset()\nprint(c.count),8,0.0,0,(Predefined),2\n0,2\n0,0.0186249963007867,o3-mini
193,Convert a string to an integer (implement `atoi`).,Medium,"def my_atoi(s):\n    s = s.strip()\n    if not s:\n        return 0\n    sign = 1\n    index = 0\n    if s[0] in ['-','+']:\n        if s[0] == \-\"": \n            sign = -1\n        index += 1\n    result = 0\n    while index < len(s) and s[index].isdigit():\n        result = result * 10 + int(s[index])\n        index += 1\n    return sign * result\n\nprint(my_atoi(\""   -42\""))""",10,1.0,1,   -42,-42,-42,0.0180000206455588,o3-mini
194,Write a program to group anagrams from a list of words.,Medium,"from collections import defaultdict\ndef group_anagrams(words):\n    groups = defaultdict(list)\n    for word in words:\n        key = ''.join(sorted(word))\n        groups[key].append(word)\n    return list(groups.values())\n\nprint(group_anagrams([""eat"", ""tea"", ""tan"", ""ate"", ""nat"", ""bat""]))",7,1.0,1,"[""eat"", ""tea"", ""tan"", ""ate"", ""nat"", ""bat""]","[['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]","[['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]",0.0243749818764626,o3-mini
195,Find the kth smallest element in a list using a heap.,Medium,"import heapq\ndef kth_smallest(lst, k):\n    heapq.heapify(lst)\n    for _ in range(k-1):\n        heapq.heappop(lst)\n    return heapq.heappop(lst)\n\nprint(kth_smallest([7,10,4,3,20,15], 3))",6,2.0,1,"[7,10,4,3,20,15] 3",7,7,0.0179589842446148,o3-mini
196,Implement a debounce decorator for a function.,Medium,"import time\nfrom functools import wraps\ndef debounce(wait):\n    def decorator(fn):\n        last_call = [0]\n        @wraps(fn)\n        def debounced(*args, **kwargs):\n            now = time.time()\n            if now - last_call[0] >= wait:\n                last_call[0] = now\n                return fn(*args, **kwargs)\n        return debounced\n    return decorator\n\n@debounce(0.1)\ndef test():\n    return ""Called""\n\nprint(test())\ntime.sleep(0.2)\nprint(test())",12,1.0,0,(Predefined),Called\nCalled,Called\nCalled,0.0270830059889704,o3-mini
197,Write a function that counts the number of islands in a 2D grid.,Medium,"def num_islands(grid):\n    if not grid:\n        return 0\n    rows, cols = len(grid), len(grid[0])\n    count = 0\n    def dfs(r, c):\n        if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] != ""1"":\n            return\n        grid[r][c] = ""#""\n        dfs(r+1, c)\n        dfs(r-1, c)\n        dfs(r, c+1)\n        dfs(r, c-1)\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == ""1"":\n                count += 1\n                dfs(r, c)\n    return count\n\ngrid = [\n    [""1"",""1"",""0"",""0"",""0""],\n    [""1"",""1"",""0"",""0"",""0""],\n    [""0"",""0"",""1"",""0"",""0""],\n    [""0"",""0"",""0"",""1"",""1""]\n]\nprint(num_islands(grid))",17,1.0,2,(Predefined grid),3,3,0.0257919891737401,o3-mini
198,Create a class-based implementation of a singly linked list.,Medium,"class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def append(self, value):\n        if not self.head:\n            self.head = Node(value)\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = Node(value)\n    def to_list(self):\n        result = []\n        current = self.head\n        while current:\n            result.append(current.value)\n            current = current.next\n        return result\n\nll = LinkedList()\nll.append(1)\nll.append(2)\nll.append(3)\nprint(ll.to_list())",14,0.0,2,(Predefined),"[1, 2, 3]","[1, 2, 3]",0.0300410029012709,o3-mini
199,"Design a class to manage a playlist of songs with add, remove, and play operations.",Medium,"class Playlist:\n    def __init__(self):\n        self.songs = []\n    def add(self, song):\n        self.songs.append(song)\n    def remove(self, song):\n        if song in self.songs:\n            self.songs.remove(song)\n    def play(self):\n        if self.songs:\n            return self.songs[0]\n        return None\n\npl = Playlist()\npl.add(""Song A"")\npl.add(""Song B"")\npl.remove(""Song A"")\nprint(pl.play())",8,0.0,0,(Predefined),Song B,Song B,0.0247080170083791,o3-mini
0,"Write a program that prints ""Hello, World!"" to the console.",Easy,"def hello_world():
    return ""Hello, World!""
",2,0.0,0,,"“Hello, World!”","“Hello, World!”",0.0452080275863409,copilot
1,"Ask the user for their name and age, then print a greeting message.",Easy,"def greet(name, age):
    return f""Hello, {name}! You are {age} years old.""
",2,2.0,0,"[Sasha, 20]","“Hello, Sasha! You are 20 years old.”","“Hello, Sasha! You are 20 years old.”",0.0829999917186797,copilot
2,Write a program that adds two user-input numbers and displays the result.,Easy,"def add_numbers(num1, num2):
    return num1 + num2",2,2.0,0,"[50, 20]",70,70,0.0763339921832085,copilot
3,Take an integer as input and print whether it is even or odd.,Easy,"def is_even_or_odd(number):
    return ""Even"" if number % 2 == 0 else ""Odd""",2,1.0,0,5,Odd,Odd,0.0909999944269657,copilot
4,"Given three numbers, print the largest one.",Easy,"def find_largest(a, b, c):
    return max(a, b, c)
",3,2.0,0,"[5, -4, 46]",46,46,0.0898750149644911,copilot
5,Swap the values of two variables without using a third variable.,Easy,"def swap(a, b):
    a, b = b, a
    return a, b
",3,2.0,0,"[1, 10]","(10, 1)","(10, 1)",0.0706249848008156,copilot
6,Print all numbers from 1 to 100 using a for loop.,Easy,"def print_numbers():
    return [i for i in range(1, 101)]",2,0.0,0,,"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]","[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",0.0882919994182885,copilot
7,Ask the user for a number and print its multiplication table up to 10.,Easy,"def multiplication_table(n):
    return [n * i for i in range(1, 11)]",2,1.0,0,5,"[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]","[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",0.059375015553087,copilot
8,Write a function to calculate the factorial of a number using a loop.,Easy,"def factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result",5,1.0,1,5,120,120,0.105916988104582,copilot
9,Check if a given number is a prime number.,Easy,"def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True",7,1.0,0,5,TRUE,TRUE,0.20599999697879,copilot
10,Generate and print the first `n` numbers of the Fibonacci sequence.,Easy,"def fibonacci(n):
    sequence = [0, 1]
    for i in range(2, n):
        sequence.append(sequence[-1] + sequence[-2])
    return sequence[:n]",5,1.0,1,5,"[0, 1, 1, 2, 3]","[0, 1, 1, 2, 3]",0.0711249886080623,copilot
11,Reverse a string taken from user input without using slicing.,Easy,"def reverse_string(s):
    result = """"
    for char in s:
        result = char + result
    return result
",5,1.0,1,hello there,ereht olleh,ereht olleh,0.10095804464072,copilot
12,Count the number of vowels in a given string.,Easy,"def count_vowels(s):
    vowels = ""aeiouAEIOU""
    return sum(1 for char in s if char in vowels)",3,1.0,0,hello there,4,4,0.0813339720480144,copilot
13,Check whether a given string is a palindrome.,Easy,"def is_palindrome(s):
    return s == s[::-1]",2,1.0,0,racecar,TRUE,TRUE,0.0855419784784317,copilot
14,Write a program to find the length of a list without using `len()`.,Easy,"def find_length(lst):
    count = 0
    for _ in lst:
        count += 1
    return count",5,1.0,1,"[1, 2, 3, 4, 5]",5,5,0.100000004749745,copilot
15,Find the largest and smallest numbers in a list of integers.,Easy,"def find_largest_smallest(lst):
    return max(lst), min(lst)
",2,1.0,0,"[1, 2, 3, 4, 5]","(5, 1)","(5, 1)",0.0907920184545219,copilot
16,Remove all duplicate elements from a list and print the result.,Easy,"def remove_duplicates(lst):
    return list(set(lst))
",2,1.0,0,"[1, 2, 2, 4, 5]","[1, 2, 4, 5]","[1, 2, 4, 5]",0.0598750193603337,copilot
17,Sort a list of integers in ascending order using the built-in sort() method.,Easy,"def sort_list(lst):
    lst.sort()
    return lst
",3,1.0,0,"[5, 3, 6, 2, 1]","[1, 2, 3, 5, 6]","[1, 2, 3, 5, 6]",0.108457985334098,copilot
18,Calculate the sum of all numbers in a list using a loop.,Easy,"def sum_of_list(lst):
    total = 0
    for num in lst:
        total += num
    return total",5,1.0,1,"[5, 3, 6, 2, 1]",17,17,0.124374986626208,copilot
19,Write a function that returns the second largest number in a list.,Easy,"def second_largest(lst):
    unique_sorted = sorted(set(lst), reverse=True)
    return unique_sorted[1] if len(unique_sorted) > 1 else None",3,1.0,0,"[5, 3, 6, 2, 1]",5,5,0.0884580076672137,copilot
20,Convert a temperature from Celsius to Fahrenheit.,Easy,"def celsius_to_fahrenheit(celsius):
    return (celsius * 9/5) + 32",2,1.0,0,18,64.4,64.4,0.0631249858997762,copilot
21,Count the number of words in a sentence input by the user.,Easy,"def count_words(sentence):
    return len(sentence.split())
",2,1.0,0,“Hello there this is the DS4200 project”,7,7,0.0482910545542836,copilot
22,Write a program that prints the ASCII value of a given character.,Easy,"def ascii_value(char):
    return ord(char)
",2,1.0,0,h,104,104,0.0527499942108989,copilot
23,Print each character of a string on a new line using a loop.,Easy,"def print_characters(s):
    for char in s:
        print(char)
",3,1.0,1,Hello there,"h
e
l
l
o
 
t
h
e
r
e","h
e
l
l
o
 
t
h
e
r
e",0.123208039440215,copilot
24,Merge two user-defined lists and print the merged result.,Easy,"def merge_lists(lst1, lst2):
    return lst1 + lst2",2,1.0,0,"[[1, 2, 3], [2, 4, 6]]","[1, 2, 3, 2, 4, 6]","[1, 2, 3, 2, 4, 6]",0.100499950349331,copilot
25,Square every element of a list using list comprehension.,Easy,"def square_elements(lst):
    return [x ** 2 for x in lst]",2,1.0,0," [1, 2, 3, 4, 5]","[1, 4, 9, 16, 25]","[1, 4, 9, 16, 25]",0.114666996523738,copilot
26,Filter out all even numbers from a list using list comprehension.,Easy,"def filter_even(lst):
    return [x for x in lst if x % 2 != 0]",2,1.0,0,"[1, 2, 3, 4, 5]","[1, 3, 5]","[1, 3, 5]",0.100458040833473,copilot
27,Write a function that returns the sum of digits of an integer.,Easy,"def sum_of_digits(n):
    return sum(int(digit) for digit in str(n))
",2,1.0,0,123,6,6,0.109999964479357,copilot
28,Find the maximum of three numbers using a user-defined function.,Easy,"def max_of_three(a, b, c):
    return max(a, b, c)
",2,3.0,0,"(5, 6, 2)",6,6,0.0957080046646297,copilot
29,Create a list of numbers from 1 to 20 using `range()` and print it.,Easy,"def create_range_list(start, end):
    return list(range(start, end + 1))",2,2.0,0,"(5, 15)","[5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]","[5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",0.100082950666547,copilot
30,Convert a string to uppercase without using the `upper()` function.,Easy,"def to_uppercase(s):
    return ''.join(chr(ord(char) - 32) if 'a' <= char <= 'z' else char for char in s)",2,1.0,0,Hello there!,HELLO THERE!,HELLO THERE!,0.0742499832995236,copilot
31,Count how many times a specific character appears in a string.,Easy,"def count_character(s, char):
    return s.count(char)
",2,2.0,0,"(“hello there!”, “h”)",2,2,0.0819579581730068,copilot
32,Replace all spaces in a string with underscores.,Easy,"def replace_spaces(s):
    return s.replace(' ', '_')
",2,1.0,0,Hello there!,hello_there!,hello_there!,0.062250008340925,copilot
33,"Write a function to check if a number is positive, negative, or zero.",Easy,"def check_number(n):
    if n > 0:
        return ""Positive""
    elif n < 0:
        return ""Negative""
    else:
        return ""Zero""",7,1.0,0,-10,Negative,Negative,0.0700000091455877,copilot
34,Create a dictionary with 3 key-value pairs and print it.,Easy,"def create_dictionary():
    return {""key1"": ""value1"", ""key2"": ""value2"", ""key3"": ""value3""}",2,0.0,0,,"{'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}","{'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}",0.0562500208616257,copilot
35,Access a specific value from a dictionary using a key.,Easy,"def get_value(d, key):
    return d.get(key)
",2,2.0,0,"({“a"": 1, ""b"": 2, ""c"": 3}, “a”)",1,1,0.170666025951505,copilot
36,Add a new key-value pair to an existing dictionary.,Easy,"def add_key_value(d, key, value):
    d[key] = value
    return d
",3,3.0,0,"({“a"": 1, ""b"": 2, ""c"": 3}, “d”, 4)","{'a': 1, 'b': 2, 'c': 3, 'd': 4}","{'a': 1, 'b': 2, 'c': 3, 'd': 4}",0.0713749905116856,copilot
37,Delete a key-value pair from a dictionary.,Easy,"def delete_key(d, key):
    d.pop(key, None)
    return d
",3,2.0,0,"({“a"": 1, ""b"": 2, ""c"": 3}, “d”)","{'a': 1, 'b': 2, 'c': 3}","{'a': 1, 'b': 2, 'c': 3}",0.110708002466708,copilot
38,Create a tuple with 5 elements and print the second element.,Easy,"def create_tuple():
    return (1, 2, 3, 4, 5)",2,0.0,0,,"(1, 2, 3, 4, 5)","(1, 2, 3, 4, 5)",0.0797499669715762,copilot
39,Convert a list to a tuple and print the result.,Easy,"def list_to_tuple(lst):
    return tuple(lst)
",2,1.0,0,"[1, 2, 3, 4, 5]","(1, 2, 3, 4, 5)","(1, 2, 3, 4, 5)",0.0537919695489109,copilot
40,Check if an element exists in a list.,Easy,"def element_exists(lst, element):
    return element in lst
",2,2.0,0,"([1, 2, 3, 4, 5], 6)",FALSE,FALSE,0.0627909903414547,copilot
41,Check if a key exists in a dictionary.,Easy,"def key_exists(d, key):
    return key in d
",2,2.0,0,"({'a': 1, 'b': 2}, 'b')",TRUE,TRUE,0.0981250195764005,copilot
42,Write a program to calculate the area of a rectangle given length and width.,Easy,"def rectangle_area(length, width):
    return length * width
",2,2.0,0,"(34, 12)",408,408,0.0791249913163483,copilot
43,Create a set with 5 elements and print it.,Easy,"def create_set():
    return {1, 2, 3, 4, 5}",2,0.0,0,,"{1, 2, 3, 4, 5}","{1, 2, 3, 4, 5}",0.0483330222778022,copilot
44,Add an element to a set and remove another.,Easy,"def modify_set(s, add_element, remove_element):
    s.add(add_element)
    s.discard(remove_element)
    return s
",4,3.0,0,"({1, 2, 3, 4, 5}, 5, 2)","{1, 3, 4, 5}","{1, 3, 4, 5}",0.137750001158565,copilot
45,Find the union and intersection of two sets.,Easy,"def union_intersection(set1, set2):
    return set1 | set2, set1 & set2",2,2.0,0,"({1, 2, 3, 4, 5}, {2, 4, 6, 8})
","({1, 2, 3, 4, 5, 6, 8}, {2, 4})","({1, 2, 3, 4, 5, 6, 8}, {2, 4})",0.0802919967100024,copilot
46,Find the number of digits in an integer.,Easy,"def count_digits(n):
    return len(str(n))
",2,1.0,0,123,3,3,0.0826250179670751,copilot
47,Check whether a given year is a leap year.,Easy,"def is_leap_year(year):
    return (year % 4 == 0 and year % 100 != 0) or year % 400 == 0",2,1.0,0,2004,TRUE,TRUE,0.0979999895207584,copilot
48,Create a list of the first 10 even numbers using a loop.,Easy,"def even_numbers():
    return [i for i in range(2, 21, 2)]",2,0.0,0,,"[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]","[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",0.154624984133989,copilot
49,Write a function that accepts a string and returns it reversed using recursion.,Easy,"def reverse_string_recursively(s):
    if not s:
        return """"
    return s[-1] + reverse_string_recursively(s[:-1])",4,1.0,0,hello there,ereht olleh,ereht olleh,0.11774996528402,copilot
0,Write a function that finds the GCD of two numbers using the Euclidean algorithm.,Medium,"def gcd(a, b):
    while b:
        a, b = b, a % b
    return a
",4,,1,"(48, 18)",6,6,0.0562909990549088,copilot
1,Implement a function to check whether a string is a pangram.,Medium,"def is_pangram(s):
    alphabet = set(""abcdefghijklmnopqrstuvwxyz"")
    return alphabet.issubset(set(s.lower()))
",3,,0,The quick brown fox jumps over the lazy dog,TRUE,TRUE,0.0739170354790986,copilot
2,Write a function that returns the most frequent element in a list.,Medium,"def most_frequent(lst):
    from collections import Counter
    return Counter(lst).most_common(1)[0][0]
",3,,0,"[1, 2, 2, 3, 3, 3]",3,3,0.109333952423185,copilot
3,Implement a binary search algorithm on a sorted list.,Medium,"def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1
",11,,1,"([1, 3, 5, 7, 9], 7)",3,3,0.123917008750141,copilot
4,Write a function to calculate the power of a number without using the power operator.,Medium,"def power(base, exp):
    result = 1
    for _ in range(abs(exp)):
        result *= base
    return result if exp >= 0 else 1 / result
",5,,1,"(2, 5)",32,32,0.12375001097098,copilot
5,"Given a list of integers, return the longest increasing subsequence.",Medium,"def longest_increasing_subsequence(arr):
    if not arr:
        return []
    dp = [1] * len(arr)
    for i in range(len(arr)):
        for j in range(i):
            if arr[i] > arr[j]:
                dp[i] = max(dp[i], dp[j] + 1)
    return max(dp)
",9,,2,"[1, 2, 1, 2, 3, 1]",3,3,0.267333991359919,copilot
6,Check if two strings are anagrams of each other.,Medium,"def are_anagrams(s1, s2):
    return sorted(s1) == sorted(s2)
",2,,0,"('listen', 'silent')",TRUE,TRUE,0.0886250054463744,copilot
7,"Implement a stack using a Python list with push, pop, and peek operations.",Medium,"class Stack:
    def __init__(self):
        self.stack = []

    def push(self, item):
        self.stack.append(item)

    def pop(self):
        return self.stack.pop() if not self.is_empty() else None

    def peek(self):
        return self.stack[-1] if not self.is_empty() else None

    def is_empty(self):
        return len(self.stack) == 0
",11,,0,"s = Stack()
s.push(1)
s.push(2)
print(s.pop())
print(s.peek())
print(s.is_empty())
",,,0.242333044297993,copilot
8,Create a function that generates all prime numbers up to a given number.,Medium,"def generate_primes(n):
    primes = []
    for num in range(2, n + 1):
        is_prime = all(num % div != 0 for div in range(2, int(num ** 0.5) + 1))
        if is_prime:
            primes.append(num)
    return primes
",7,,1,10,"[2, 3, 5, 7]","[2, 3, 5, 7]",0.172665982972831,copilot
9,Write a function that flattens a nested list.,Medium,"def flatten_list(lst):
    result = []
    for item in lst:
        if isinstance(item, list):
            result.extend(flatten_list(item))
        else:
            result.append(item)
    return result
",8,,1,"[1, [2, [3, 4], 5]]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]",0.0924579799175263,copilot
10,Check if a string has balanced parentheses.,Medium,"def is_balanced(s):
    stack = []
    for char in s:
        if char in ""({["":
            stack.append(char)
        elif char in "")}]"":
            if not stack or {""("": "")"", ""{"": ""}"", ""["": ""]""}[stack.pop()] != char:
                return False
    return not stack
",9,,1,(())(),TRUE,TRUE,0.0885420013219118,copilot
11,Write a function to calculate the nth Fibonacci number using recursion with memoization.,Medium,"def fibonacci_memo(n, memo={}):
    if n in memo:
        return memo[n]
    if n <= 1:
        return n
    memo[n] = fibonacci_memo(n - 1, memo) + fibonacci_memo(n - 2, memo)
    return memo[n]
",7,,0,10,55,55,0.120332988444716,copilot
12,Implement the Caesar cipher for encryption and decryption.,Medium,"def caesar_cipher(text, shift, decrypt=False):
    if decrypt:
        shift = -shift
    return """".join(
        chr((ord(char) - 65 + shift) % 26 + 65) if char.isupper()
        else chr((ord(char) - 97 + shift) % 26 + 97) if char.islower()
        else char
        for char in text
    )
",9,,0,"('abc', 3)",def,def,0.107457977719605,copilot
13,Write a function that removes all duplicates from a string while preserving the order.,Medium,"def remove_duplicates(s):
    seen = set()
    return """".join(seen.add(char) or char for char in s if char not in seen)
",3,,0,banana,ban,ban,0.1284169848077,copilot
14,Find the first non-repeating character in a string.,Medium,"def first_non_repeating(s):
    from collections import Counter
    counts = Counter(s)
    for char in s:
        if counts[char] == 1:
            return char
    return None
",7,,1,swiss,w,w,0.151000043842942,copilot
15,Calculate the sum of all even numbers in a matrix.,Medium,"def sum_even_matrix(matrix):
    return sum(num for row in matrix for num in row if num % 2 == 0)
",2,,0,"[[1, 2], [3, 4]]",6,6,0.134415982756764,copilot
16,"Given a 2D matrix, transpose it.",Medium,"def transpose_matrix(matrix):
    return [list(row) for row in zip(*matrix)]
",2,,0,"[[1, 2], [3, 4]]","[[1, 3], [2, 4]]","[[1, 3], [2, 4]]",0.0677919597364962,copilot
17,Implement a queue using two stacks.,Medium,"class QueueUsingStacks:
    def __init__(self):
        self.stack1 = []
        self.stack2 = []

    def enqueue(self, item):
        self.stack1.append(item)

    def dequeue(self):
        if not self.stack2:
            while self.stack1:
                self.stack2.append(self.stack1.pop())
        return self.stack2.pop() if self.stack2 else None
",11,,1,"queue = QueueUsingStacks()
queue.enqueue(1)
queue.enqueue(2)
print(queue.dequeue())
",1,1,0.24975003907457,copilot
18,Write a function that rotates a list by k elements to the right.,Medium,"def rotate_list(lst, k):
    k %= len(lst)
    return lst[-k:] + lst[:-k]
",3,,0,"([1, 2, 3, 4, 5], 2)","[4, 5, 1, 2, 3]","[4, 5, 1, 2, 3]",0.122292025480419,copilot
19,Determine if a number is an Armstrong number.,Medium,"def is_armstrong(n):
    digits = list(map(int, str(n)))
    return n == sum(d ** len(digits) for d in digits)
",3,,0,153,TRUE,TRUE,0.0845409813337028,copilot
20,Write a function that returns all subsets of a set.,Medium,"def subsets(s):
    result = [[]]
    for elem in s:
        result += [x + [elem] for x in result]
    return result
",5,,1,"[1, 2]","[[], [1], [2], [1, 2]]","[[], [1], [2], [1, 2]]",0.0718749943189323,copilot
21,Find the intersection of two lists.,Medium,"def intersection(lst1, lst2):
    return list(set(lst1) & set
",2,,0,"([1, 2, 3], [2, 3, 4])","[2, 3]","[2, 3]",0.107250001747161,copilot
22,Generate Pascal’s Triangle up to n rows.,Medium,"def pascals_triangle(n):
    triangle = [[1]]
    for i in range(1, n):
        row = [1]
        for j in range(1, i):
            row.append(triangle[i - 1][j - 1] + triangle[i - 1][j])
        row.append(1)
        triangle.append(row)
    return triangle
",9,,2,4,"[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]","[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]",0.0862920423969626,copilot
23,Implement a simple contact book using a dictionary with names and phone numbers.,Medium,"class ContactBook:
    def __init__(self):
        self.contacts = {}

    def add_contact(self, name, number):
        self.contacts[name] = number

    def remove_contact(self, name):
        if name in self.contacts:
            del self.contacts[name]

    def get_contact(self, name):
        return self.contacts.get(name)
",10,,0,"cb = ContactBook()
cb.add_contact(""Sasha"", 123345)
cb.remove_contact(""Sasha"")
print(cb.get_contact(""Sasha""))
a",,,0.174749991856515,copilot
24,Write a function that finds the longest word in a given sentence.,Medium,"def longest_word(sentence):
    words = sentence.split()
    return max(words, key=len)
",3,,0,Find the longest word here,longest,longest,0.106208957731724,copilot
25,Write a function to check if a number is a palindrome without converting it to a string.,Medium,"def is_number_palindrome(n):
    original = n
    reverse = 0
    while n > 0:
        reverse = reverse * 10 + n % 10
        n //= 10
    return original == reverse
",7,,1,121,TRUE,TRUE,0.0977499876171351,copilot
26,Implement the merge sort algorithm.,Medium,"def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left = arr[:mid]
        right = arr[mid:]

        merge_sort(left)
        merge_sort(right)

        i = j = k = 0
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                arr[k] = left[i]
                i += 1
            else:
                arr[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            arr[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            arr[k] = right[j]
            j += 1
            k += 1
    return arr
",25,,3,"[5, 2, 4, 1, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]",0.503584044054151,copilot
27,Write a function that calculates the nth triangular number.,Medium,"def triangular_number(n):
    return n * (n + 1) // 2
",2,,0,5,15,15,0.0636669574305415,copilot
28,Find the longest common prefix in a list of strings.,Medium,"def longest_common_prefix(strs):
    if not strs:
        return """"
    prefix = strs[0]
    for s in strs[1:]:
        while not s.startswith(prefix):
            prefix = prefix[:-1]
            if not prefix:
                return """"
    return prefix
",10,,2,"['flower', 'flow', 'flight']",fl,fl,0.101207988336682,copilot
29,Check if a given Sudoku board is valid.,Medium,"def is_valid_sudoku(board):
    def is_valid_group(group):
        group = [x for x in group if x != "".""]
        return len(group) == len(set(group))

    for row in board:
        if not is_valid_group(row):
            return False

    for col in zip(*board):
        if not is_valid_group(col):
            return False

    for i in range(0, 9, 3):
        for j in range(0, 9, 3):
            block = [board[x][y] for x in range(i, i + 3) for y in range(j, j + 3)]
            if not is_valid_group(block):
                return False

    return True
",16,,4,"sudoku_board = [
    [""5"", ""3"", ""."", ""."", ""7"", ""."", ""."", ""."", "".""],
    [""6"", ""."", ""."", ""1"", ""9"", ""5"", ""."", ""."", "".""],
    [""."", ""9"", ""8"", ""."", ""."", ""."", ""."", ""6"", "".""],
    [""8"", ""."", ""."", ""."", ""6"", ""."", ""."", ""."", ""3""],
    [""4"", ""."", ""."", ""8"", ""."", ""3"", ""."", ""."", ""1""],
    [""7"", ""."", ""."", ""."", ""2"", ""."", ""."", ""."", ""6""],
    [""."", ""6"", ""."", ""."", ""."", ""."", ""2"", ""8"", "".""],
    [""."", ""."", ""."", ""4"", ""1"", ""9"", ""."", ""."", ""5""],
    [""."", ""."", ""."", ""."", ""8"", ""."", ""."", ""7"", ""9""]
]
",TRUE,TRUE,0.441042007878423,copilot
30,"Implement a simple calculator that evaluates expressions with +, -, *, and /.",Medium,"def simple_calculator(expression):
    return eval(expression)
",2,,0,2+3*4-5,9,9,0.0866660266183317,copilot
31,"Given a list of numbers, find all unique pairs that sum to a specific target.",Medium,"def unique_pairs(nums, target):
    seen, output = set(), set()
    for num in nums:
        diff = target - num
        if diff in seen:
            output.add((min(num, diff), max(num, diff)))
        seen.add(num)
    return list(output)
",8,,1,"([1, 2, 3, 4, 5], 6)","[(2, 4), (1, 5)]","[(2, 4), (1, 5)]",0.149416970089078,copilot
32,Write a function to compute the digital root of a number.,Medium,"def digital_root(n):
    while n >= 10:
        n = sum(map(int, str(n)))
    return n
",4,,1,942,6,6,0.0627090339548886,copilot
33,Implement a basic LRU (Least Recently Used) cache.,Medium,"from collections import OrderedDict

class LRUCache:
    def __init__(self, capacity):
        self.cache = OrderedDict()
        self.capacity = capacity

    def get(self, key):
        if key in self.cache:
            self.cache.move_to_end(key)
            return self.cache[key]
        return -1

    def put(self, key, value):
        if key in self.cache:
            self.cache.move_to_end(key)
        self.cache[key] = value
        if len(self.cache) > self.capacity:
            self.cache.popitem(last=False)
",16,,0,"cache = LRUCache(capacity=3)
cache.put(""a"", 1)
cache.put('b', 2)
cache.get('a')
cache.put('c', 4)
cache.put('e', 5)
",,,0.25366700720042,copilot
34,Determine the majority element in a list (appears more than n/2 times).,Medium,"def majority_element(nums):
    from collections import Counter
    counts = Counter(nums)
    for num, count in counts.items():
        if count > len(nums) // 2:
            return num
    return None
",7,,1,"[3, 3, 4, 2, 3, 3, 3]",3,3,0.164166965987533,copilot
35,Write a function that checks if a number is a perfect square.,Medium,"def is_perfect_square(n):
    return int(n ** 0.5) ** 2 == n
",2,,0,49,TRUE,TRUE,0.0683750258758664,copilot
36,Implement a function to convert Roman numerals to integers.,Medium,"def roman_to_int(s):
    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    total = 0
    prev = 0
    for char in reversed(s):
        curr = roman_dict[char]
        total += curr if curr >= prev else -curr
        prev = curr
    return total
",9,,1,IX,9,9,0.111332978121936,copilot
37,Create a function to serialize and deserialize a dictionary.,Medium,"import json

def serialize_dict(d):
    return json.dumps(d)

def deserialize_dict(s):
    return json.loads(s)
",5,,0,"{'a':1, 'b':2}",,,0.176250003278255,copilot
38,Write a function to generate the first n rows of the Floyd’s triangle.,Medium,"def floyds_triangle(n):
    result, num = [], 1
    for i in range(1, n + 1):
        result.append([num + j for j in range(i)])
        num += i
    return result
",6,,1,4,"[[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]","[[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]",0.0981250195764005,copilot
39,Check if a list is a rotated version of another list.,Medium,"def is_rotated_version(lst1, lst2):
    return len(lst1) == len(lst2) and lst2 in lst1 * 2
",2,,0,"('abcde', 'deabc')",TRUE,TRUE,0.096999981906265,copilot
40,Create a function that returns the number of trailing zeros in a factorial.,Medium,"def trailing_zeros_factorial(n):
    count = 0
    while n >= 5:
        n //= 5
        count += n
    return count
",6,,1,100,24,24,0.0826250179670751,copilot
41,Write a function that finds the longest palindromic substring.,Medium,"def longest_palindromic_substring(s):
    def expand_from_center(left, right):
        while left >= 0 and right < len(s) and s[left] == s[right]:
            left -= 1
            right += 1
        return right - left - 1

    start = end = 0
    for i in range(len(s)):
        len1 = expand_from_center(i, i)
        len2 = expand_from_center(i, i + 1)
        max_len = max(len1, len2)
        if max_len > end - start:
            start = i - (max_len - 1) // 2
            end = i + max_len // 2
    return s[start:end + 1]
",15,,2,babad,aba,aba,0.187541008926928,copilot
42,Create a class that implements a simple counter with increment and reset methods.,Medium,"class Counter:
    def __init__(self):
        self.count = 0

    def increment(self):
        self.count += 1

    def reset(self):
        self.count = 0
",7,,0,"counter = Counter()
counter.increment()
counter.increment()
counter.reset()
",,,0.127209001220763,copilot
43,Convert a string to an integer (implement `atoi`).,Medium,"def atoi(s):
    s = s.strip()
    if not s:
        return 0
    sign = -1 if s[0] == '-' else 1
    if s[0] in '+-':
        s = s[1:]
    result = 0
    for char in s:
        if char.isdigit():
            result = result * 10 + int(char)
        else:
            break
    return max(min(result * sign, 2**31 - 1), -2**31)
",14,,1,-42,-42,-42,0.102707999758422,copilot
44,Write a program to group anagrams from a list of words.,Medium,"def group_anagrams(words):
    from collections import defaultdict
    anagrams = defaultdict(list)
    for word in words:
        sorted_word = ''.join(sorted(word))
        anagrams[sorted_word].append(word)
    return list(anagrams.values())
",7,,1,"['bat', 'tab', 'tap', 'pat']","[['bat', 'tab'], ['tap', 'pat']]","[['bat', 'tab'], ['tap', 'pat']]",0.151040963828564,copilot
45,Find the kth smallest element in a list using a heap.,Medium,"import heapq

def kth_smallest(nums, k):
    return heapq.nsmallest(k, nums)[-1]
",3,,0,"([7, 10, 4, 3, 20, 15], 3)",7,7,0.144457968417555,copilot
46,Implement a debounce decorator for a function.,Medium,"import time
from threading import Timer

def debounce(func, wait):
    def wrapper(*args, **kwargs):
        if hasattr(wrapper, '_timer'):
            wrapper._timer.cancel()
        wrapper._timer = Timer(wait, lambda: func(*args, **kwargs))
        wrapper._timer.start()
    return wrapper
",9,,0,,,,,copilot
47,Write a function that counts the number of islands in a 2D grid.,Medium,"def count_islands(grid):
    def dfs(i, j):
        # Base case: Check bounds and whether the cell is part of an island
        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] != '1':
            return
        # Mark the cell as visited
        grid[i][j] = '0'
        # Explore all 4 neighboring cells
        dfs(i + 1, j)  # Down
        dfs(i - 1, j)  # Up
        dfs(i, j + 1)  # Right
        dfs(i, j - 1)  # Left

    if not grid or not grid[0]:
        return 0

    count = 0
    # Iterate through each cell in the grid
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            # If a land cell is found, perform DFS and increment the count
            if grid[i][j] == '1':
                dfs(i, j)
                count += 1
    return count

",23,,2,"grid = [
    ['1', '1', '0', '0', '0'],
    ['1', '1', '0', '0', '0'],
    ['0', '0', '1', '0', '0'],
    ['0', '0', '0', '1', '1']
]
",3,3,0.372625014279038,copilot
48,Create a class-based implementation of a singly linked list.,Medium,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class SinglyLinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def display(self):
        nodes = []
        current = self.head
        while current:
            nodes.append(current.data)
            current = current.next
        return nodes

    def delete(self, key):
        current = self.head
        if current and current.data == key:
            self.head = current.next
            return
        prev = None
        while current and current.data != key:
            prev = current
            current = current.next
        if current:
            prev.next = current.next
",34,,3,"sll = SinglyLinkedList()
sll.append(1)
sll.append(2)
sll.display()
sll.delete(1)
",,,0.273332989308983,copilot
49,"Design a class to manage a playlist of songs with add, remove, and play operations.",Medium,"class Song:
    def __init__(self, title, artist):
        self.title = title
        self.artist = artist

class Playlist:
    def __init__(self):
        self.songs = []

    def add_song(self, title, artist):
        song = Song(title, artist)
        self.songs.append(song)

    def remove_song(self, title):
        self.songs = [song for song in self.songs if song.title != title]

    def play(self):
        return [f""Now playing: {song.title} by {song.artist}"" for song in self.songs]

    def show_playlist(self):
        return [f""{song.title} by {song.artist}"" for song in self.songs]
",16,,0,"p = Playlist()
p.add_song(""hello"", ""adele"")
p.add_song(""baby"", ""justin bieber"")
p.remove_song('baby')
print(p.play())
print(p.show_playlist())
",,,0.314000004436821,copilot
