Link to our website: 
https://sashadivall.github.io/ds4200project/ 

Visualization 1: Barplot: Comparison of Execution Time by Difficulty and Model & Comparison of Number of Lines By Difficulty and Model
This figure was designed to provide a general overview of the average execution time and average number of lines for each model's 
code generation across each difficulty level. Although all the code snippets are different across model and difficulty, these metrics 
can be compared using the average since each model answers the same 50 questions for each difficulty level. This figure shows the trends of how
execution time and number of lines change as difficulty increases and which models have the highest execution time and highest number of lines. 
This plot was made with Altair.


Visualization 2: Scatter plot: log(Execution Time) vs Number of Lines
Since the exeuction times are very small values and differ only by hundreths of a millisecond, to emphasize the pattern in how execution time changes
as the number of lines increases, we took the log of the execution time. In coding, long code is only bad when it unnecessarily increases the execution
time of the code. So this plot provides an interaction to allow the user to see if a particular model writes more lines of code, will the execution time increase or 
stay about the same? This plot was made with Altair.


Visualization 3: Boxplot: Distribution of Execution Time by Difficulty
This figure narrows in on the distribution of the execution time. We decided to design this because while the first two plots give the user an idea of how the 
averages and trends of execution time compare across different models and difficulties, they do not show the whole picture. This plot shows the distribution of the 
execution time grouped by model and difficulty on the same scale. The user can see if the distribution is narrow (like easy problems solved by gpt-4o) or wide with a 
lot of outliers (like medium problems solved by Microsoft Copilot). This plot was made with Plotly Express. 


Visualization 4: Heatmap: Execution Time vs Loops by Model
We designed this figure to show the impact of number of loops on the model. In algorithms, each loop adds O(n) complexity time, where n is the number of times
the loop iterates. Thus, we would expect the execution time to increase as the number of loops increase. When designing this figure, we noticed an interesting trend. 
Solutions generated by OpenAI models (gpt-4o and o3-mini) did not take longer to execute as the number of loops increased while solutions generated by Microsoft Copilot
did. This shows the advantage of paying for premium LLMs when writing code. This plot was made with D3.js.


Visualization 5: Interactive Dataset Exploration
We designed this visualization to provide the user with another set of interaction. Since there were 300 code snippets generated, there is no good of displaying that
much data on one screen. This visualization prompts the user to select a difficulty, question, and a model to see the code it generated, a sample input, and the 
execution time. This allows the user to investigate the code each model generated on a deeper level. 